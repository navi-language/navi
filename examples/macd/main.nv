use macd;
use std.io;
use std.fs;
use std.json;

struct Candlestick {
    time: int,
    open: float,
    high: float,
    low: float,
    close: float,
    volume: float,
    turnover: float,
}

impl Candlestick {
    fn to_string(): string {
        return
            `{ time: ${self.time}, open: ${self.open}, high: ${self.high}, low: ${self.low}, close: ${self.close}, volume: ${self.volume}, turnover: ${self.turnover} }`
       ;
    }
}

fn main() {
    let f = fs.open("examples/macd/data.json");
    let data = json.parse(f.read_to_string());

    let candlesticks = [Candlestick] {};

    for (let item in data.array()!) {
        candlesticks.push(Candlestick {
            time: item.get("time")?.int()!,
            open: item.get("open")?.float()!,
            high: item.get("high")?.float()!,
            low: item.get("low")?.float()!,
            close: item.get("close")?.float()!,
            volume: item.get("volume")?.int()! as float,
            turnover: item.get("turnover")?.int()! as float
        });
    }

    let t = macd.new();
    for (let candlestick in candlesticks) {
        t.execute(time: candlestick.time, close: candlestick.close);
        io.println(candlestick.to_string());
    }
}
