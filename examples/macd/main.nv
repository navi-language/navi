use std.fs;
use std.io;
use std.json;

use macd;

#[serde()]
struct Candlestick {
    time: int,
    open: float,
    high: float,
    low: float,
    close: float,
    volume: float,
    turnover: float,
}

impl ToString for Candlestick {
    pub fn to_string(self): string {
        return try! json.to_string(self);
    }
}

fn main() throws {
    let f = try fs.open("examples/macd/data.json");
    let candlesticks = try json.parse::<[Candlestick]>(f.read_to_string());

    let t = macd.new();
    for (let candlestick in candlesticks) {
        t.execute(time: candlestick.time, close: candlestick.close);
        io.println(candlestick.to_string());
    }
}

test "Candlestick.to_string()" {
    let c = Candlestick {
        time: 1,
        open: 2.0,
        high: 3.0,
        low: 4.0,
        close: 5.0,
        volume: 6.0,
        turnover: 7.0
    };
    assert_eq c.to_string(), `{"time":1,"open":2.0,"high":3.0,"low":4.0,"close":5.0,"volume":6.0,"turnover":7.0}`;
}
