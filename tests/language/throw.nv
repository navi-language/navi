use test_harness;

struct MyError {
    msg: string,
}

impl MyError {
    fn error(self): string {
        return `MyError ${self.msg}`;
    }
}

fn call_throw(a: int, b: int): int throws {
    let c = a + b;
    if (c < 0) {
        throw `(a + b = ${c}) < 0`;
    } else {
        return c;
    }
}

fn call2_throw(a: int) throws {
    if (a == 1) {
        throw "string error";
    } else if (a == 2) {
        throw MyError { msg: "MyError" };
    }
}

fn call3_throw() throws {
    assert_eq try call_throw(10, 20), 30;
    assert_eq try call_throw(-50, 10), -40;
    assert_eq try call_throw(20, 10), 10;
}

test "try_catch" {
    let a = false;
    do {
        assert_eq try call_throw(20, 10), 30;
        assert_eq try call_throw(-20, 10), -10;
    } catch(e) {
        assert_eq e.error(), "(a + b = -10) < 0";
        a = true;
    }
    assert a;
}

test "nested try_catch" {
    let a = 0;

    do {
        do {
            assert_eq try call_throw(20, 10), 30;
            assert_eq try call_throw(-20, 10), -10;
        } catch(e) {
            assert_eq e.error(), "(a + b = -10) < 0";
            a += 1;
        }

        assert_eq try call_throw(20, 20), 40;
        assert_eq try call_throw(-50, 10), -40;
    } catch(e) {
        assert_eq e.error(), "(a + b = -40) < 0";
        a += 1;
    }

    assert_eq a, 2;
}

test "error type" {
    let a = 0;
    do {
        try call2_throw(1);
    } catch(e: string) {
        a = 1;
    } catch(e: MyError) {
        a = 2;
    }
    assert_eq a, 1;

    let a = 0;
    do {
        try call2_throw(2);
    } catch(e: string) {
        a = 1;
    } catch(e: MyError) {
        a = 2;
    }
    assert_eq a, 2;
}

test "throw from function" {
    let a = false;
    do {
        try call3_throw();
    } catch(e) {
        assert_eq e.error(), "(a + b = -40) < 0";
        a = true;
    }
    assert a;
}

test "throw from try block" {
    let a = false;
    do {
        throw "abc";
    } catch(e) {
        assert_eq e.error(), "abc";
        a = true;
    }
    assert a;
}

test "throw from catch block" {
    let a = false;

    do {
        do {
            throw "def";
        } catch(e) {
            assert_eq e.error(), "def";
            throw "abc";
        }
    } catch(e) {
        assert_eq e.error(), "abc";
        a = true;
    }

    assert a;
}

test "closure throws" {
    let a = fn(a: int): int throws {
        if (a < 0) {
            throw "abc";
        }
        return a * 10;
    };

    let b = false;
    do {
        assert_eq try a(10), 100;
        assert_eq try a(-10), -100;
        assert false;
    } catch(e) {
        assert_eq e.error(), "abc";
        b = true;
    }
    assert b;
}

struct MyObj {
}

impl MyObj {
    fn call(self, a: int): int throws {
        if (a < 0) {
            throw "abc";
        }
        return a * 10;
    }
}

test "method throws" {
    let a = MyObj {};

    let b = false;
    do {
        assert_eq try a.call(10), 100;
        assert_eq try a.call(-10), -100;
        assert false;
    } catch(e) {
        assert_eq e.error(), "abc";
        b = true;
    }
    assert b;
}

interface MyInterface {
    fn call(self, a: int): int throws;
}

test "interface throws" {
    let a: MyInterface = MyObj {};

    let b = false;
    do {
        assert_eq try a.call(10), 100;
        assert_eq try a.call(-10), -100;
        assert false;
    } catch(e) {
        assert_eq e.error(), "abc";
        b = true;
    }
    assert b;
}

fn call3(a: int): (int, string) throws {
    if (a < 10) {
        return a * 10, `ss${a * 10}ss`;
    } else {
        throw "user error";
    }
}

fn call4(a: int): int throws {
    if (a < 10) {
        return a * 10;
    } else {
        throw "user error";
    }
}

test "try expr" {
    let a, b = try? call3(5);
    assert_eq a, 50;
    assert_eq b, "ss50ss";

    let a, b = try? call3(12);
    assert_eq a, nil;
    assert_eq b, nil;

    let r = try? call4(5) + call4(7);
    assert_eq r, 120;

    let r = try? call4(5) + call4(17);
    assert_eq r, nil;

    if (let r = try? call4(5) + call4(7)) {
        assert_eq r, 120;
    } else {
        assert false;
    }

    let a = false;
    if (let r = try? call4(5) + call4(17)) {
        assert false;
    } else {
        a = true;
    }
    assert a;

    let r: int = try! call4(5) + call4(7);
    assert_eq r, 120;
}

use std.io;

test "call builtin" {
    let a = false;
    do {
        assert_eq try test_harness.parse_int("123"), 123;
        try test_harness.parse_int("def");
    } catch(e) {
        assert_eq e.error(), "invalid digit found in string";
        a = true;
    }
    assert a;

    let a = false;
    do {
        let v1, v2 = try test_harness.parse_int2("123");
        assert_eq v1, 123;
        assert_eq v2, 1230;
        try test_harness.parse_int2("def");
    } catch(e) {
        assert_eq e.error(), "invalid digit found in string";
        assert_eq e.(NativeError).name, "core::num::error::ParseIntError";
        a = true;
    }
    assert a;
}
