struct User {
    id: int,
    name: string = "",
    profile: Profile,
    tags: [string] = [string] { "foo" },
    numbers: [int]? = [int] { 1, 2, 3 },
    confirmed: bool = false,
}

struct Profile {
    bio: string
}

impl Profile {
    fn new(bio: string): Profile {
        return Profile { bio: bio };
    }
}

impl User {
    fn add(self, n: int) {
        self.id += n;
    }
}

test "struct member" {
    let u = User { id: 10, profile: Profile { bio: "foo" } };
    assert_eq u.id, 10;
    assert_eq u.name, "";
    assert_eq u.profile.bio, "foo";
    assert_eq u.confirmed, false;
    u.id = 33;
    u.name = "Sunli";
    u.profile.bio = "bar";
    assert_eq u.id, 33;
    assert_eq u.name, "Sunli";
    assert_eq u.profile.bio, "bar";
    assert_eq u.tags.len(), 1;
    assert_eq u.tags[0], "foo";
    assert_eq u.numbers?.len(), 3;
    assert_eq u.numbers?[0], 1;
    assert_eq u.numbers?[1], 2;
    assert_eq u.numbers?[2], 3;
}

test "assign without type prefix" {
    let u: User = User { id: 10, profile: { bio: "test" } };
    assert_eq u.id, 10;
    assert_eq u.profile.bio, "test";
}

test "call method" {
    let u = User { id: 10, profile: { bio: "foo" } };
    assert_eq u.id, 10;
    u.add(5);
    assert_eq u.id, 15;
}

test "call static method" {
    let p = Profile.new("abc");
    assert_eq p.bio, "abc";
}
