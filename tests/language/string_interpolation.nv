test "string interpolation" {
    assert_eq `1`, "1";
    assert_eq `\{1}`, "{1}";
    assert_eq `${10}`, "10";
    assert_eq `${10`, "${10";
    assert_eq `${10 + 20}`, "30";
    assert_eq `hello ${"world"}`, "hello world";
    assert_eq `hello ${"world" + "!"}`, "hello world!";
    assert_eq `hello ${"world" + "!"} ${"foo"}`, "hello world! foo";
}

test "mutliline string interpolation" {
    assert_eq `hello ${
        "world"
    }`, "hello world";
    assert_eq `hello ${
        "world" + "!"
    }`, "hello world!";
    assert_eq `hello ${
        "world" + "!"
    } ${
        "foo"
    }`, "hello world! foo";
}

test "escape" {
    // assert_eq `\{`, "{";
    // assert_eq `\}`, "}";
    assert_eq `\${10}`, "${10}";
    assert_eq `\${10 + 20\}`, "${10 + 20}";
    assert_eq `hello \${"world"}`, "hello ${\"world\"}";
}

test "int" {
    assert_eq `${10},${-128},${0}`, "10,-128,0";

    let a: int? = nil;
    assert_eq `a = ${a}`, "a = nil";
}

test "float" {
    assert_eq `${3.1415926},${-3.1415},${0.0},${10.0},${-10.00}`, "3.1415926,-3.1415,0,10,-10";

    let a: float? = nil;
    assert_eq `a = ${a}`, "a = nil";
}

test "string" {
    let s = "hello";
    let n = 10;
    assert_eq `${s} = ${n}`, "hello = 10";

    let a: string? = nil;
    assert_eq `a = ${a}`, "a = nil";
}

test "bool" {
    assert_eq `${true},${false}`, "true,false";

    let a: bool? = nil;
    assert_eq `a = ${a}`, "a = nil";
}

struct TestStringInterpolation {}

test "struct" {
    let a = TestStringInterpolation {};
    assert_eq `${a}`, "<string_interpolation.TestStringInterpolation>";

    let a: TestStringInterpolation? = nil;
    assert_eq `struct = ${a}`, "struct = nil"; 
}