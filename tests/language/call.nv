use test_harness;

fn f2(a: int, b: int): int {
    return a - b;
}

test "call navi function with two arguments" {
    assert_eq f2(20, 13), 7;
    assert_eq f2(8, 20), -12;
}

fn f1(a: int): int {
    return a * 2;
}

test "call navi function with one argument" {
    assert_eq f1(20), 40;
    assert_eq f1(5), 10;
}

fn f0(): int {
    return 99;
}

test "call navi function with no arguments" {
  assert_eq f0(), 99;
}

fn swap_int(a: int, b: int): (int, int) {
    return b, a;
}

test "call navi function with multiple return values" {
    let a, b = swap_int(1, 2);
    assert_eq a, 2;
    assert_eq b, 1;
}

test "call builtin function with two arguments" {
    assert_eq test_harness.f2(20, 13), 7;
    assert_eq test_harness.f2(8, 20), -12;
}

test "call builtin function with one argument" {
    assert_eq test_harness.f1(20), 40;
    assert_eq test_harness.f1(5), 10;
}

test "call builtin function with no arguments" {
    assert_eq test_harness.f0(), 99;
}

test "call builtin function with multiple return values" {
    let a, b = test_harness.swap_int(1, 2);
    assert_eq a, 2;
    assert_eq b, 1;
}

fn call_optional(a: string, b: int?): string {
    return `${a}${b}`;
}

test "call with optional args" {
    assert_eq call_optional("abc", 20), "abc20";
}