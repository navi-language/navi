use foo;

test "init array" {
    let array = [int] { 10, 20, 30, 40, 50 };
    assert_eq array[0], 10;
    assert_eq array[1], 20;
    assert_eq array[2], 30;
    assert_eq array[3], 40;
    assert_eq array[4], 50;
    assert_eq array.len(), 5;
}

test "init array with rest" {
    let b = [int] { 40, 50 };
    let a = [int] { 10, 20, 30, ..b };
    assert_eq a[0], 10;
    assert_eq a[1], 20;
    assert_eq a[2], 30;
    assert_eq a[3], 40;
    assert_eq a[4], 50;
    assert_eq a.len(), 5;
}

test "init map" {
    let map = <string, int> { "a": 10, "b": 20, "c": 30 };
    assert_eq map["a"], 10;
    assert_eq map["b"], 20;
    assert_eq map["c"], 30;
    assert_eq map.len(), 3;
}

struct Point {
    x: int,
    y: int,
}

test "init struct" {
    let point = Point { x: 10, y: 20 };
    assert_eq point.x, 10;
    assert_eq point.y, 20;
}

test "init struct array" {
    let points = [Point] {
        Point { x: 10, y: 20 },
        Point { x: 30, y: 40 },
        Point { x: 50, y: 60 }
    };

    assert_eq points[0].x, 10;
    assert_eq points[0].y, 20;
    assert_eq points[1].x, 30;
    assert_eq points[1].y, 40;
    assert_eq points[2].x, 50;
    assert_eq points[2].y, 60;
    assert_eq points.len(), 3;
}

struct TTT {
    x: int = 10,
    y: int? = 20,
    z: ToString? = "abc",
}

test "init struct with default value" {
    let ttt = TTT {};
    assert_eq ttt.x, 10;
    assert_eq ttt.y, 20;
    assert_eq ttt.z!.to_string(), "abc";
}

test "init foreign struct" {
    let t = foo.T1 { a: 10, b: "def" };
    assert_eq t.a, 10;
    assert_eq t.b, "def";
}

struct A {
    value: int,
}

test "omit type" {
    let a: [int] = { 1, 2, 3 };
    let b: [A] = { { value: 1 }, { value: 2 }, { value: 3 } };
    let b = [A] { { value: 1 }, { value: 2 }, { value: 3 } };
    let c: <string, A> = { "a": { value: 1 }, "b": { value: 2 }, "c": { value: 3 } };
    let c = <string, A> { "a": { value: 1 }, "b": { value: 2 }, "c": { value: 3 } };
}
