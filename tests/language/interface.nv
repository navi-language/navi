interface MMM {
    fn mmm(self, a: int, b: int): int;

    fn kkk(self, a: int, b: int = 10): int;
}

struct A {
    v: int,
}

struct B {
    v: int,
}

impl A {
    fn mmm(self, a: int, b: int): int {
        return a + b + self.v;
    }

    fn kkk(self, a: int, b: int = 20): int {
        return a + b + self.v;
    }
}

impl B {
    fn mmm(self, a: int, b: int): int {
        return a * b + self.v;
    }

    fn kkk(self, a: int, b: int = 20): int {
        return a * b + self.v;
    }
}

test "struct convert to interface" {
    let a: MMM = A { v: 7 };
    a = B { v: 7 };

    let b: MMM????? = A { v: 7 };
}

interface Len {
    fn len(self): int;
}

test "object convert to interface" {
    let a: Len = "abcde";
    assert_eq a.len(), 5;
}

test "unwrap" {
    let a: MMM = A { v: 7 };
    let r: A = a.(A);
}

test "query" {
    let a: MMM = B { v: 7 };
    let r = 0;
    if (let a = a.(A)) {
        r = 1;
    } else if (let a = a.(B)) {
        r = 2;
    }
    assert_eq r, 2;

    let a: MMM = A { v: 3 };
    if (let a = a.(A)) {
        r = 1;
    } else if (let a = a.(B)) {
        r = 2;
    }
    assert_eq r, 1;
}

test "call method" {
    let a: MMM = A { v: 3 };
    assert_eq a.mmm(3, 6), 12;
    let b: MMM = B { v: 7 };
    assert_eq b.mmm(3, 6), 25;
}

test "is" {
    let a: MMM = A { v: 3 };
    assert a is A;
    a = B { v: 7 };
    assert a is B;
}

test "kw args" {
    let a: MMM = A { v: 3 };
    assert_eq a.kkk(2), 15;
    assert_eq a.kkk(2, b: 11), 16;

    let b: MMM = B { v: 7 };
    assert_eq b.kkk(2), 27;
    assert_eq b.kkk(2, b: 11), 29;
}

interface ToString {
    fn to_string(self, pretty: bool = false): string;
}

struct User {
    name: string,
    city: string,
}

struct Profile {
    user: User,
    bio: string,
}

impl User {
    fn to_string(self, pretty: bool = false): string {
        if (pretty) {
            return `User {\n  name: ${self.name},\n  city: ${self.city}\n}`;
        }

        return `User { name: ${self.name}, city: ${self.city} }`;
    }
}

impl Profile {
    fn to_string(self, pretty: bool = false): string {
        return `Profile { user: ${self.user.to_string()}, bio: ${self.bio} }`;
    }
}

fn invoke_to_string(a: ToString): string {
    return a.to_string();
}

fn receive_to_string(t: string): ToString? {
    let user = User { name: "Jason Lee", city: "Chengdu" };

    if (t == "user") {
        return user;
    } else if (t == "profile") {
        return Profile { user: user, bio: "Hello" };
    }

    return nil;
}

test "invoke_to_string" {
    let user = User { name: "Jason Lee", city: "Chengdu" };
    assert_eq invoke_to_string(user), "User { name: Jason Lee, city: Chengdu }";

    let profile = Profile { user: user, bio: "Hello World" };
    assert_eq invoke_to_string(profile), "Profile { user: User { name: Jason Lee, city: Chengdu }, bio: Hello World }";
}

test "receive_to_string" {
    let res = receive_to_string("user")!;
    assert_eq res.to_string(), "User { name: Jason Lee, city: Chengdu }";
    assert_eq res.to_string(pretty: true), "User {\n  name: Jason Lee,\n  city: Chengdu\n}";
    let user = res.(User);
    assert_eq user.name, "Jason Lee";
    assert_eq user.city, "Chengdu";

    let res = receive_to_string("profile")!;
    let profile = res.(Profile);
    assert_eq res.to_string(), "Profile { user: User { name: Jason Lee, city: Chengdu }, bio: Hello }";
    assert_eq profile.user.name, "Jason Lee";
    assert_eq profile.user.city, "Chengdu";
    assert_eq profile.bio, "Hello";

    let res = receive_to_string("unknown");
    assert_eq res, nil;
}
