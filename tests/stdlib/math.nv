use std.env;

test "abs" {
  assert_eq 1.abs(), 1;
  assert_eq (-1).abs(), 1;
  assert_eq 0.abs(), 0;

  assert_eq 1.2.abs(), 1.2;
  assert_eq (-1.2).abs(), 1.2;
}

test "acos" {
  assert_eq 1.acos(), 0.0;
  assert_eq 0.acos(), 1.5707963267948966;
  assert_eq (-1).acos(), 3.141592653589793;

  assert_eq 1.0.acos(), 0.0;
  assert_eq 0.0.acos(), 1.5707963267948966;
  assert_eq (-1.0).acos(), 3.141592653589793;
}

test "asin" {
  assert_eq 1.asin(), 1.5707963267948966;
  assert_eq 0.asin(), 0.0;
  assert_eq (-1).asin(), -1.5707963267948966;

  assert_eq 1.0.asin(), 1.5707963267948966;
  assert_eq 0.0.asin(), 0.0;
  assert_eq (-1.0).asin(), -1.5707963267948966;
}

test "atan" {
  assert_eq 1.atan(), 0.7853981633974483;
  assert_eq 0.atan(), 0.0;
  assert_eq (-1).atan(), -0.7853981633974483;

  assert_eq 1.0.atan(), 0.7853981633974483;
  assert_eq 0.0.atan(), 0.0;
  assert_eq (-1.0).atan(), -0.7853981633974483;
}

test "ceil" {
  assert_eq 1.ceil(), 1.0;
  assert_eq 1.2.ceil(), 2.0;
  assert_eq 1.5.ceil(), 2.0;
  assert_eq 1.9.ceil(), 2.0;

  assert_eq (-1).ceil(), -1.0;
  assert_eq (-1.2).ceil(), -1.0;
  assert_eq (-1.5).ceil(), -1.0;
  assert_eq (-1.9).ceil(), -1.0;
}

test "cos" {
  assert_eq 0.cos(), 1.0;
  assert_eq 1.cos(), 0.5403023058681398;
  assert_eq (-1).cos(), 0.5403023058681398;

  assert_eq 0.0.cos(), 1.0;
  assert_eq 1.0.cos(), 0.5403023058681398;
  assert_eq (-1.0).cos(), 0.5403023058681398;
}

test "exp" {
  assert_eq 0.exp(), 1.0;
  assert_eq 1.exp(), 2.718281828459045;
  assert_eq (-1).exp(), 0.36787944117144233;

  assert_eq 0.0.exp(), 1.0;
  assert_eq 1.0.exp(), 2.718281828459045;
  assert_eq (-1.0).exp(), 0.36787944117144233;
}

test "floor" {
  assert_eq 3.floor(), 3.0;
  assert_eq 3.2.floor(), 3.0;
  assert_eq 3.5.floor(), 3.0;
  assert_eq 3.9.floor(), 3.0;

  assert_eq (-3).floor(), -3.0;
  assert_eq (-3.2).floor(), -4.0;
  assert_eq (-3.5).floor(), -4.0;
  assert_eq (-3.9).floor(), -4.0;
}

test "fractpart" {
  let x = 3.6;
  let y = -3.6;

  assert (x.fractpart() - 0.6).abs() < 0.000000000000001;
  assert (y.fractpart() - -(0.6)).abs() < 0.000000000000001;

  assert_eq 3.fractpart(), 0.0;
  assert_eq (-3).fractpart(), 0.0;
}

test "intpart" {
  assert_eq 3.intpart(), 3.0;
  assert_eq 3.2.intpart(), 3.0;
  assert_eq 3.5.intpart(), 3.0;
  assert_eq 3.9.intpart(), 3.0;

  assert_eq (-3).intpart(), -3.0;
  assert_eq (-3.2).intpart(), -3.0;
  assert_eq (-3.5).intpart(), -3.0;
  assert_eq (-3.9).intpart(), -3.0;
}

test "ln" {
  assert_eq 1.ln(), 0.0;
  assert_eq 2.ln(), 0.6931471805599453;
  assert_eq 10.ln(), 2.302585092994046;

  assert_eq 1.0.ln(), 0.0;
  assert_eq 2.0.ln(), 0.6931471805599453;
  assert_eq 10.0.ln(), 2.302585092994046;
}

test "log" {
  assert_eq 1.log(), 0.0;
  assert_eq 10.log(), 1.0;
  assert_eq 100.log(), 2.0;

  assert_eq 1.0.log(), 0.0;
  assert_eq 10.0.log(), 1.0;
  assert_eq 100.0.log(), 2.0;
}

test "sin" {
  assert_eq 0.sin(), 0.0;
  assert_eq 1.sin(), 0.8414709848078965;
  assert_eq (-1).sin(), -0.8414709848078965;

  assert_eq 0.0.sin(), 0.0;
  assert_eq 1.0.sin(), 0.8414709848078965;
  assert_eq (-1.0).sin(), -0.8414709848078965;
}

test "sqrt" {
  assert_eq 0.sqrt(), 0.0;
  assert_eq 1.sqrt(), 1.0;
  assert_eq 4.sqrt(), 2.0;

  assert_eq 0.0.sqrt(), 0.0;
  assert_eq 1.0.sqrt(), 1.0;
  assert_eq 4.0.sqrt(), 2.0;
}

test "tan" {
  if (env.platform() == "linux") {
    assert_eq 0.tan(), 0.0;
    assert_eq 1.tan(), 1.5574077246549023;
    assert_eq (-1).tan(), -1.5574077246549023;

    assert_eq 0.0.tan(), 0.0;
    assert_eq 1.0.tan(), 1.5574077246549023;
    assert_eq (-1.0).tan(), -1.5574077246549023;
  } else {
    assert_eq 0.tan(), 0.0;
    assert_eq 1.tan(), 1.557407724654902;
    assert_eq (-1).tan(), -1.557407724654902;

    assert_eq 0.0.tan(), 0.0;
    assert_eq 1.0.tan(), 1.557407724654902;
    assert_eq (-1.0).tan(), -1.557407724654902;
  }
}

test "max" {
  assert_eq 1.max(2), 2;
  assert_eq 2.max(1), 2;
  assert_eq 1.max(1), 1;

  assert_eq 1.0.max(2.0), 2.0;
  assert_eq 2.0.max(1.0), 2.0;
  assert_eq 1.0.max(1.0), 1.0;
}

test "min" {
  assert_eq 1.min(2), 1;
  assert_eq 2.min(1), 1;
  assert_eq 1.min(1), 1;

  assert_eq 1.0.min(2.0), 1.0;
  assert_eq 2.0.min(1.0), 1.0;
  assert_eq 1.0.min(1.0), 1.0;
}

test "mod" {
  assert_eq 7.mod(4), 3;
  assert_eq 7.mod(3), 1;
  assert_eq 7.mod(2), 1;
  assert_eq 7.mod(1), 0;
  assert_eq 8.mod(2), 0;

  assert_eq 7.0.mod(4.0), 3.0;
  assert_eq 7.0.mod(3.0), 1.0;
  assert_eq 7.0.mod(2.0), 1.0;
  assert_eq 7.0.mod(1.0), 0.0;
  assert_eq 8.0.mod(2.0), 0.0;
}

test "pow" {
  assert_eq 2.pow(3), 8;
  assert_eq 2.pow(2), 4;
  assert_eq 2.pow(1), 2;
  assert_eq 2.pow(0), 1;

  assert_eq 2.0.pow(3.0), 8.0;
  assert_eq 2.0.pow(2.0), 4.0;
  assert_eq 2.0.pow(1.0), 2.0;
  assert_eq 2.0.pow(0.0), 1.0;
}

test "round" {
  assert_eq 1.round(), 1.0;
  assert_eq 1.2.round(), 1.0;
  assert_eq 1.5.round(), 2.0;
  assert_eq 1.9.round(), 2.0;

  assert_eq (-1).round(), -1.0;
  assert_eq (-1.2).round(), -1.0;
  assert_eq (-1.5).round(), -2.0;
  assert_eq (-1.9).round(), -2.0;
}