use std.env;
use std.path;

test "get" {
    let val = env.get("PATH");
    assert_ne val, nil;
}

test "set" {
    assert_eq env.get("NAVI_TEST_ENV_VAR"), nil;

    env.set("NAVI_TEST_ENV_VAR", "hello123");
    assert_eq env.get("NAVI_TEST_ENV_VAR"), "hello123";

    env.set("NAVI_TEST_ENV_VAR", "HELLO123");
    assert_eq env.get("NAVI_TEST_ENV_VAR"), "HELLO123";

    env.remove("NAVI_TEST_ENV_VAR");
    assert_eq env.get("NAVI_TEST_ENV_VAR"), nil;
}

test "expand" {
    let val = env.expand("$PATH");
    assert val.len() > 0;

    env.set("NAVI_TEST_ENV_VAR1", "OK");
    assert_eq env.expand("$NAVI_TEST_ENV_VAR1 haha $NAVI_TEST_ENV_VAR1."), "OK haha OK.";
    assert_eq env.expand("${NAVI_TEST_ENV_VAR1} haha ${NAVI_TEST_ENV_VAR1}."), "OK haha OK.";
}

test "tmpdir" {
    let tmpdir = env.tmpdir();
    assert tmpdir.len() > 0;
}

test "platform" {
    let platform = env.platform();
    assert platform.len() > 0;
}

test "arch" {
    let arch = env.arch();
    assert arch.len() > 0;
}

test "vars" {
    env.set("NAVI_TEST_ENV1", "ENV1");
    env.set("NAVI_TEST_ENV2", "ENV2");
    let vars = env.vars();
    assert_eq vars.keys().len() > 1, true;
    if (env.platform() == "windows") {
        assert_ne vars["Path"], "", vars;
    } else {
        assert_ne vars["PATH"], "", vars;
    }

    assert_eq vars["NAVI_TEST_ENV1"], "ENV1";
    assert_eq vars["NAVI_TEST_ENV2"], "ENV2";
}

test "cwd" {
    let cwd = try! env.cwd();
    assert cwd.len() > 0;
    assert path.is_absolute(cwd);
}

// NOTE: becafeful with this test, it will change your cwd
test "chdir" {
    let cwd = try! env.cwd();
    let new_path = path.join(cwd, "tests");

    try! env.chdir(new_path);
    assert_eq try! env.cwd(), new_path;

    // revert back to original cwd
    try! env.chdir(cwd);
}
