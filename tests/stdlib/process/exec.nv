use std.env;
use std.fs;
use std.path;
use std.process;

test "exec" {
    if (env.platform() == "windows") {
        return;
    }

    let args = ["-c", "echo", "Hello, world!"];
    let envs = {"ENV1": "hello", "ENV2": "Foo Bar"};

    let output = try! process.exec("sh", args: args, envs: envs);
    assert_eq output.status, 0, `${output:?}`;
    assert_eq output.stderr.to_string().trim(), "";
    assert_eq output.stdout.to_string().trim(), "";
}

test "exec status" {
    if (env.platform() == "windows") {
        return;
    }

    let output = try! process.exec("false");
    assert_eq output.status, 1;

    let output = try! process.exec("true");
    assert_eq output.status, 0;
}

test "exec stderr" {
    if (env.platform() == "windows") {
        return;
    }

    let output = try! process.exec("sh", args: ["-c", "echo This message goes to stderr >&2"]);
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string().trim(), "This message goes to stderr";
    assert_eq output.stdout.to_string().trim(), "";
}

test "exec with args" {
    if (env.platform() == "windows") {
        return;
    }

    let args = ["arg1", "arg2", "arg3"];
    let output = try! process.exec("echo", args: args);
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string().trim(), "arg1 arg2 arg3";

    let output = try! process.exec("sh", args: ["-c", `echo "hello world\nnext line." | wc -l`]);
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string().trim(), "2";

    let output = try! process.exec("sh", args: ["-c", `echo "hello world" && echo foo bar dar`]);
    assert_eq output.status, 0, output.stderr.to_string();
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string().trim(), "hello world\nfoo bar dar";

    let output = try! process.exec(
        "sh",
        args: ["-c", "echo", `"hello world"`, "&&", "echo foo bar dar"]
    );
    assert_eq output.status, 0, output.stderr.to_string();
    assert_eq output.stdout.to_string().trim(), "";
}

test "exec with env" {
    if (env.platform() == "windows") {
        return;
    }

    let envs = {"ENV1": "hello", "ENV2": "Foo Bar"};
    let output = try! process.exec("printenv", envs: envs);
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string(), "";

    let stdout = output.stdout.to_string();
    assert_eq stdout.contains("ENV1=hello"), true, stdout;
    assert_eq stdout.contains("ENV2=Foo Bar"), true, stdout;
}

test "exec stdin" {
    if (env.platform() == "windows") {
        return;
    }

    let filename = path.join(env.tmpdir(), "test-exec-in");
    if (fs.exists(filename)) {
        try! fs.remove_file(filename);
    }
    let f = try! fs.create(filename);
    try! f.write_string("Hello, world!");
    try! f.flush();

    let output = try! process.exec("cat", stdin: "null");
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string(), "";

    let output = try! process.exec("cat", stdin: "piped");
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string(), "";

    let output = try! process.exec("cat", stdin: filename);
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string(), "Hello, world!";
    try! fs.remove_file(filename);
}

test "exec stdout" {
    if (env.platform() == "windows") {
        return;
    }

    let output = try! process.exec("echo", args: ["Hello, world!"], stdout: "null");
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string().trim(), "";

    let output = try! process.exec("echo", args: ["Hello, world!"], stdout: "piped");
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string().trim(), "Hello, world!";

    let f = path.join(env.tmpdir(), "test-exec-stdout");
    if (fs.exists(f)) {
        try! fs.remove_file(f);
    }
    let output = try! process.exec("echo", args: ["Hello, world!"], stdout: f);
    assert_eq output.status, 0, `exec failed, ${output.stderr} file: ${f}`;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string(), "";
    let out = try! fs.read_to_string(f);
    assert_eq out, "Hello, world!\n", f;

    // test when file exist
    let output = try! process.exec("echo", args: ["Hello, world!"], stdout: f);
    assert_eq output.status, 0, `exec failed, ${output.stderr} file: ${f}`;
    let out = try! fs.read_to_string(f);
    assert_eq out, "Hello, world!\nHello, world!\n", f;
    try! fs.remove_file(f);
}

test "exec stderr" {
    if (env.platform() == "windows") {
        return;
    }

    let output = try! process.exec("sh", args: ["-c", "echo Hello, world! >&2"], stderr: "null");
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string(), "";

    let output = try! process.exec("sh", args: ["-c", "echo Hello, world! >&2"], stderr: "piped");
    assert_eq output.status, 0;
    assert_eq output.stderr.to_string().trim(), "Hello, world!";
    assert_eq output.stdout.to_string(), "";

    let f = path.join(env.tmpdir(), "test-exec-stderr");
    if (fs.exists(f)) {
        try! fs.remove_file(f);
    }
    let output = try! process.exec("sh", args: ["-c", "echo Hello, world! >&2"], stderr: f);
    assert_eq output.status, 0, `exec failed, ${output.stderr} file: ${f}`;
    assert_eq output.stderr.to_string(), "";
    assert_eq output.stdout.to_string(), "";
    let out = try! fs.read_to_string(f);
    assert_eq out, "Hello, world!\n", f;
    try! fs.remove_file(f);
}

test "exec with cwd" {
    if (env.platform() == "windows") {
        return;
    }

    let cwd = env.tmpdir();
    let full_path = try! path.absolute(cwd);
    let output = try! process.exec("pwd", args: ["-L"], cwd: cwd);
    assert_eq output.status, 0;
    assert_eq output.stdout.to_string().trim(), full_path;
}

test "exec with uid & gid" {
    if (env.platform() == "windows") {
        return;
    }

    // get current uid & gid
    let output = try! process.exec("id", args: ["-u"]);
    assert_eq output.status, 0;
    let uid = output.stdout.to_string().trim().parse_int() || 0;
    let output = try! process.exec("id", args: ["-g"]);
    assert_eq output.status, 0;
    let gid = output.stdout.to_string().trim().parse_int() || 0;

    let output = try! process.exec("id", args: ["-u"], uid: uid);
    assert_eq output.status, 0;
    assert_eq output.stdout.to_string().trim(), `${uid}`;

    let output = try! process.exec("id", args: ["-g"], gid: gid);
    assert_eq output.status, 0;
    assert_eq output.stdout.to_string().trim(), `${gid}`;
}
