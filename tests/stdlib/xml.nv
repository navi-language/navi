use std.io.Cursor;
use std.json;
use std.testing.assert_throws;
use std.xml;

#[serde(rename_all = "lowercase")]
struct FooBar {
    foo: string,
    baz: Baz
}

#[serde(rename_all = "lowercase")]
struct Baz {
    dar: [string]
}

#[serde(rename_all = "lowercase")]
struct User {
    name: string,
    id: int,
    profile: Profile
}

#[serde(rename_all = "lowercase")]
struct Profile {
    city: string
}

test "parse" {
    let val = try! xml.parse::<FooBar>(`<?xml version="1.0" encoding="utf-8"?><user><foo>bar</foo><baz><dar>qux</dar><dar>quux</dar></baz></user>`);

    assert_eq val.foo, "bar";
    assert_eq val.baz.dar[0], "qux";
    assert_eq val.baz.dar[1], "quux";
    assert_eq try! json.to_string(val), `{"foo":"bar","baz":{"dar":["qux","quux"]}}`;

    assert_throws(|| {
        try xml.parse::<FooBar>("foo");
    }, `Syntax: 1:1 Unexpected characters outside the root element: f`);

    let user = try! xml.parse::<User>(`
    <user>
        <name>Sunli</name>
        <id>123456</id>
        <profile city="Wuhan" />
    </user>
    `);
    assert_eq user.name, "Sunli";
    assert_eq user.id, 123456;
    assert_eq user.profile.city, "Wuhan";
}

test "to_string" {
    let foo_bar = FooBar {
        foo: "bar",
        baz: {dar: ["qux", "quux"]}
    };

    assert_eq try! xml.to_string(foo_bar), `<?xml version="1.0" encoding="utf-8"?><foo>bar</foo><baz><dar>qux</dar><dar>quux</dar></baz>`;

    // nil
    assert_eq try! xml.to_string(nil), ``;
    // string
    assert_eq try! xml.to_string("sunli"), `<?xml version="1.0" encoding="utf-8"?>sunli`;
    // int
    assert_eq try! xml.to_string(123), `<?xml version="1.0" encoding="utf-8"?>123`;
    // float
    assert_eq try! xml.to_string(123.456), `<?xml version="1.0" encoding="utf-8"?>123.456`;
    // bool
    assert_eq try! xml.to_string(true), `<?xml version="1.0" encoding="utf-8"?>true`;
    assert_eq try! xml.to_string(false), `<?xml version="1.0" encoding="utf-8"?>false`;
    // array
    assert_eq try! xml.to_string([1, 2, 3]), `<?xml version="1.0" encoding="utf-8"?>123`;
    // map
    assert_eq try! xml.to_string({"foo": "bar", "baz": "qux"}), `<?xml version="1.0" encoding="utf-8"?><baz>qux</baz><foo>bar</foo>`;
    let values: <string, Any> = {"foo": "bar", "baz": 1, "qux": 1.23, "quux": true};
    assert_eq try! xml.to_string(values), `<?xml version="1.0" encoding="utf-8"?><quux>true</quux><baz>1</baz><qux>1.23</qux><foo>bar</foo>`;
}

test "from_string" {
    let input = `<?xml version="1.0" encoding="utf-8"?><user><foo>bar</foo><baz><dar>qux</dar><dar>quux</dar></baz></user>`;
    let user = try! xml.from_string::<FooBar>(input);
    assert_eq user.foo, "bar";
    assert_eq user.baz.dar[0], "qux";

    let user = try! xml.parse::<FooBar>(input);
    assert_eq user.foo, "bar";
    assert_eq user.baz.dar[0], "qux";
}

test "from_bytes" {
    let input = `<?xml version="1.0" encoding="utf-8"?><user><foo>bar</foo><baz><dar>qux</dar><dar>quux</dar></baz></user>`.bytes();
    let user = try! xml.from_bytes::<FooBar>(input);
    assert_eq user.foo, "bar";
    assert_eq user.baz.dar[0], "qux";

    let user = try! xml.parse::<FooBar>(input);
    assert_eq user.foo, "bar";
    assert_eq user.baz.dar[0], "qux";
}

test "from_reader" {
    let reader = Cursor.new(`<?xml version="1.0" encoding="utf-8"?><user><foo>bar</foo><baz><dar>qux</dar><dar>quux</dar></baz></user>`);
    let user = try! xml.from_reader::<FooBar>(reader);
    assert_eq user.foo, "bar";
    assert_eq user.baz.dar[0], "qux";

    let reader = Cursor.new(`<?xml version="1.0" encoding="utf-8"?><user><foo>bar</foo><baz><dar>qux</dar><dar>quux</dar></baz></user>`);
    let user = try! xml.parse::<FooBar>(reader);
    assert_eq user.foo, "bar";
    assert_eq user.baz.dar[0], "qux";
}
