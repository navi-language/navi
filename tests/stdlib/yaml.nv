use std.io.Cursor;
use std.json;
use std.yaml;

struct FooBar {
    foo: string,
    baz: Baz
}

struct Baz {
    dar: [string]
}

struct User {
    name: string,
    id: int,
    profile: Profile
}

struct Profile {
    city: string
}

test "parse" {
    // nil
    assert_eq try! yaml.parse::<string?>("null"), nil;
    // string
    assert_eq try! yaml.parse::<string>("foo"), "foo";
    // int
    assert_eq try! yaml.parse::<int>("123"), 123;
    // float
    assert_eq try! yaml.parse::<float>("123.456"), 123.456;
    // bool
    assert_eq try! yaml.parse::<bool>("true"), true;
    // array
    assert_eq try! yaml.parse::<[string]>("- foo\n- bar"), ["foo", "bar"];
    assert_eq try! yaml.parse::<[int]>("- 123\n- 456"), [123, 456];
    assert_eq try! yaml.parse::<[float]>("- 123.456\n- 456.789"), [123.456, 456.789];
    assert_eq try! yaml.parse::<[bool]>("- true\n- false"), [true, false];
    // map
    assert_eq try! yaml.parse::<<string, string?>>("foo: bar\nbaz: qux"), {
        "foo": "bar",
        "baz": "qux"
    };
    assert_eq try! yaml.parse::<<string, int>>("foo: 123\nbaz: 456"), {"foo": 123, "baz": 456};

    // struct
    let val = try! yaml.parse::<FooBar>(`foo: bar\nbaz:\n  dar:\n    - qux\n    - quux\n`);

    assert_eq val.foo, "bar";
    assert_eq val.baz.dar[0], "qux";
    assert_eq val.baz.dar[1], "quux";
    assert_eq try! json.to_string(val), `{"foo":"bar","baz":{"dar":["qux","quux"]}}`;

    do {
        try yaml.parse::<FooBar>("foo");
    } catch(e) {
        assert_eq e.error(), `invalid type: string "foo", expected a struct`;
    }

    let user = try! yaml.parse::<User>(`
    name: Sunli
    id: 123456
    profile:
      city: Wuhan
    `);
    assert_eq user.name, "Sunli";
    assert_eq user.id, 123456;
    assert_eq user.profile.city, "Wuhan";
}

test "to_string" {
    // nil
    let s: string? = nil;
    assert_eq try! yaml.to_string(s), "null\n";
    // string
    assert_eq try! yaml.to_string("foo"), "foo\n";
    // int
    assert_eq try! yaml.to_string(123), "123\n";
    // float
    assert_eq try! yaml.to_string(123.456), "123.456\n";
    // bool
    assert_eq try! yaml.to_string(true), "true\n";
    assert_eq try! yaml.to_string(false), "false\n";
    // array
    assert_eq try! yaml.to_string(["foo", "bar"]), "- foo\n- bar\n";
    assert_eq try! yaml.to_string([123, 456]), "- 123\n- 456\n";
    assert_eq try! yaml.to_string([123.456, 456.789]), "- 123.456\n- 456.789\n";
    assert_eq try! yaml.to_string([true, false]), "- true\n- false\n";
    let values: [Any?] = ["foo", 1123, 123.456, true, nil];
    assert_eq try! yaml.to_string(values), "- foo\n- 1123\n- 123.456\n- true\n- null\n";
    // map
    assert_eq try! yaml.to_string({"foo": "bar", "baz": "qux"}), "baz: qux\nfoo: bar\n";
    let values: <string, Any> = {"foo": "bar", "baz": 456};
    assert_eq try! yaml.to_string(values), "baz: 456\nfoo: bar\n";

    // struct
    let foo_bar = FooBar {
        foo: "bar",
        baz: {dar: ["qux", "quux"]}
    };

    assert_eq try! yaml.to_string(foo_bar), "foo: bar\nbaz:\n  dar:\n  - qux\n  - quux\n";
}

test "from_string" {
    let str = "foo: bar\nbaz:\n  dar:\n    - qux\n    - quux\n";
    let item = try! yaml.from_string::<FooBar>(str);
    assert_eq item.foo, "bar";
    assert_eq item.baz.dar[0], "qux";
    assert_eq item.baz.dar[1], "quux";

    let str = "foo: bar\nbaz:\n  dar:\n    - qux\n    - quux\n";
    let item = try! yaml.parse::<FooBar>(str);
    assert_eq item.foo, "bar";
    assert_eq item.baz.dar[0], "qux";
    assert_eq item.baz.dar[1], "quux";
}

test "from_bytes" {
    let bytes = "foo: bar\nbaz:\n  dar:\n    - qux\n    - quux\n".bytes();
    let item = try! yaml.from_bytes::<FooBar>(bytes);
    assert_eq item.foo, "bar";
    assert_eq item.baz.dar[0], "qux";
    assert_eq item.baz.dar[1], "quux";

    let bytes = "foo: bar\nbaz:\n  dar:\n    - qux\n    - quux\n".bytes();
    let item = try! yaml.parse::<FooBar>(bytes);
    assert_eq item.foo, "bar";
    assert_eq item.baz.dar[0], "qux";
    assert_eq item.baz.dar[1], "quux";
}

test "from_reader" {
    let reader = Cursor.new("foo: bar\nbaz:\n  dar:\n    - qux\n    - quux\n");
    let item = try! yaml.from_reader::<FooBar>(reader);
    assert_eq item.foo, "bar";
    assert_eq item.baz.dar[0], "qux";
    assert_eq item.baz.dar[1], "quux";

    let reader = Cursor.new("foo: bar\nbaz:\n  dar:\n    - qux\n    - quux\n");
    let item = try! yaml.parse::<FooBar>(reader);
    assert_eq item.foo, "bar";
    assert_eq item.baz.dar[0], "qux";
    assert_eq item.baz.dar[1], "quux";
}
