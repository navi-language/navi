use std.yaml;
use std.json;
use std.io.Cursor;

struct FooBar {
    foo: string,
    baz: Baz
}

struct Baz {
    dar: [string]
}

struct User {
    name: string,
    id: int,
    profile: Profile
}

struct Profile {
    city: string
}

test "parse" {
    let val = try! yaml.parse::<FooBar>(`foo: bar\nbaz:\n  dar:\n    - qux\n    - quux\n`);

    assert_eq val.foo, "bar";
    assert_eq val.baz.dar[0], "qux";
    assert_eq val.baz.dar[1], "quux";
    assert_eq try! json.to_string(val), `{"foo":"bar","baz":{"dar":["qux","quux"]}}`;

    do {
        try yaml.parse::<FooBar>("foo");
    } catch(e) {
        assert_eq e.error(), `invalid type: string "foo", expected a struct`;
    }

    let user = try! yaml.parse::<User>(`
    name: Sunli
    id: 123456
    profile:
      city: Wuhan
    `);
    assert_eq user.name, "Sunli";
    assert_eq user.id, 123456;
    assert_eq user.profile.city, "Wuhan";
}

test "to_string" {
    let foo_bar = FooBar {
        foo: "bar",
        baz: { dar: { "qux", "quux" } }
    };

    assert_eq try! yaml.to_string(foo_bar), "foo: bar\nbaz:\n  dar:\n  - qux\n  - quux\n";
}

test "from_reader" {
    let reader = Cursor.new("foo: bar\nbaz:\n  dar:\n    - qux\n    - quux\n".bytes());
    let item = try! yaml.from_reader::<FooBar>(reader);
    assert_eq item.foo, "bar";
    assert_eq item.baz.dar[0], "qux";
    assert_eq item.baz.dar[1], "quux";
}
