use std.regex.{Regex, Captures};

test "parse" {
    let re = try! Regex.new("[a-z0-9]+");
    assert re.is_match("hello");
    assert re.is_match("hello123");

    assert !re.is_match("HELLO WORLD!");
    assert !re.is_match("+-*/");
}

test "Regex - string_interpolation" {
    let re = try! Regex.new("[a-z0-9]+");
    assert_eq `${re}`, "[a-z0-9]+";
}

test "Match - string_interpolation" {
    let m = try! Regex.new("[a-z0-9]+").find("hello123");
    assert_eq `${m}`, "hello123";
}

test "is_match" {
    let re = try! Regex.new("(?mi)[\\w]+");
    assert re.is_match("hello1");
    assert re.is_match("hello123");
    assert re.is_match("Hello, world!");
    assert re.is_match("\n\nHello, world!");

    let re = try! Regex.new("^[\\w]+$");
    assert re.is_match("hello123");
    assert !re.is_match("Hello, world!");
    assert !re.is_match("\n\nHello, world!");
}

test "replace" {
    let re = try! Regex.new("[a-z]");
    assert_eq re.replace("hello", "x"), "xello";
    assert_eq re.replace("hello123", "x"), "xello123";

    let re = try! Regex.new("([\\d]+)([\\w]+)");
    assert_eq re.replace("abc123def456", "$2 $1"), "abcdef456 123";
    assert_eq re.replace("abc123def456", "$2 $1", expand: false), "abc$2 $1";
}

test "replace_all" {
    let re = try! Regex.new("[a-z]+");
    assert_eq re.replace_all("hello", "x"), "x";
    assert_eq re.replace_all("hello123hello", "x"), "x123x";

    let re = try! Regex.new("([\\d]+)");
    assert_eq re.replace_all("abc123def456", "[$1]"), "abc[123]def[456]";
    assert_eq re.replace_all("abc123def456", "[$1]", expand: false), "abc[$1]def[$1]";
}

test "replace_with" {
    let re = try! Regex.new("([a-z]+)");
    let s = re.replace_with("abc123def456", |caps| {
        let s = caps!.get(1)!.text;
        return s.to_uppercase();
    });
    assert_eq s, "ABC123def456";

    // test no expand
    let s = re.replace_with("abc123def456", |caps| {
        return "$1 $2";
    });
    assert_eq s, "$1 $2123def456";
}

test "replace_all_with" {
    let re = try! Regex.new("([a-z]+)([\\d]+)");
    let s = re.replace_all_with("abc123, def456", |caps| {
        let s = caps!.get(1)!.text;
        let n = caps!.get(2)!.text;

        return `${s.to_uppercase()}-${n}`;
    });
    assert_eq s, "ABC-123, DEF-456";

    // test no expand
    let s = re.replace_all_with("abc123, def456", |caps| {
        return "$1 $2";
    });
    assert_eq s, "$1 $2, $1 $2";

    let re = try! Regex.new("(?m)^\\s*([#]+)\\s*");
    let s = re.replace_all_with("# hello\n## world\n## world1\n### world2", |caps| {
        let s = caps!.get(1)!.text;
        return `[${s}] `;
    });
    assert_eq s, "[#] hello\n[##] world\n[##] world1\n[###] world2";
}

test "split" {
    let re = try! Regex.new("[\\s]+");
    let s = "a b c\n\rd\te";
    let parts = re.split(s);

    assert_eq parts.len(), 5;
    assert_eq parts.join(""), "abcde";
}

test "find" {
    let re = try! Regex.new("[a-z]+");

    let m = re.find("hello123hello")!;
    assert_eq m.start, 0;
    assert_eq m.end, 5;
    assert_eq m.text, "hello";

    let m = re.find("123");
    assert_eq m, nil;
}

test "find_all" {
    let re = try! Regex.new("[a-z]+");

    let matches = re.find_all("hello123world");
    assert_eq matches.len(), 2;
    assert_eq matches[0].text, "hello";
    assert_eq matches[1].text, "world";

    let m = matches[0];
    assert_eq m.start, 0;
    assert_eq m.end, 5;
    assert_eq m.text, "hello";

    let m = matches[1];
    assert_eq m.start, 8;
    assert_eq m.end, 13;
    assert_eq m.text, "world";

    let matches = re.find_all("123462.1124");
    assert_eq matches.len(), 0;
}

test "struct Match" {
    let re = try! Regex.new("[a-z]+");

    let m = re.find("hello123hello")!;
    assert_eq m.to_string(), "hello";
    assert_eq `${m}`, "hello";
}

test "captures" {
    let re = try! Regex.new("(\\d{4})-(\\d{2})-(\\d{2})");
    let caps = re.captures("2010-03-14")!;

    assert_eq caps.len(), 4;
    assert_eq caps.get(0)?.text, "2010-03-14";
    assert_eq caps.get(0)?.start, 0;
    assert_eq caps.get(0)?.end, 10;

    assert_eq caps.get(1)?.text, "2010";
    assert_eq caps.get(1)?.start, 0;
    assert_eq caps.get(1)?.end, 4;

    assert_eq caps.get(2)?.text, "03";
    assert_eq caps.get(2)?.start, 5;
    assert_eq caps.get(2)?.end, 7;

    assert_eq caps.get(3)?.text, "14";
    assert_eq caps.get(3)?.start, 8;
    assert_eq caps.get(3)?.end, 10;
}
