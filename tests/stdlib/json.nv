use std.json;
use std.io.{Cursor, StringBuffer};
use std.fs;
use std.path;

struct User {
    name: string,
    id: int,
    enabled: bool,
    float: float,
    profile: Profile,
    tags: [string]?,
    null: string?,
}

struct Profile {
    city: string,
}

test "parse" {
    // null
    let val = try! json.parse::<string?>(`null`);
    assert_eq val, nil;

    // string
    let val = try! json.parse::<string>(`"foo"`);
    assert_eq val, "foo";

    // bool
    let val = try! json.parse::<bool>(`true`);
    assert_eq val, true;
    let val = try! json.parse::<bool>(`false`);
    assert_eq val, false;

    // int
    let val = try! json.parse::<int>(`123`);
    assert_eq val, 123;

    // float
    let val = try! json.parse::<float>(`123.0`);
    assert_eq val, 123.0;

    // struct
    let user = try! json.parse::<User>(`{
        "name": "Jason Lee",
        "id": 123456,
        "enabled": true,
        "float": 1.23,
        "profile": {
            "city": "Chengdu"
        },
        "tags": null,
        "null": null
    }`);
    assert_eq user.name, "Jason Lee";
    assert_eq user.id, 123456;
    assert_eq user.enabled, true;
    assert_eq user.float, 1.23;
    assert_eq user.profile.city, "Chengdu";

    // array
    let val = try! json.parse::<[string]>(`["Navi", "Rust"]`);
    assert_eq val.len(), 2;
    assert_eq val[0], "Navi";
    assert_eq val[1], "Rust";

    // map
    let val = try! json.parse::<<string, string>>(`{"name": "Jason Lee"}`);
    assert_eq val["name"], "Jason Lee";
}

test "parse_struct" {
    let profile = try json.parse::<Profile>(`{
        "foo": "Foo Bar",
        "city": "Chengdu"
    }`);

    assert_eq profile.city, "Chengdu";
}

test "to_string" {
    let user = try! json.parse::<User>(`{
        "name": "Jason Lee",
        "id": 123456,
        "enabled": true,
        "float": 1.23,
        "profile": {
            "city": "Chengdu"
        },
        "tags": ["Navi", "Rust"],
        "null": null
    }`);
    assert_eq try! json.to_string(user), `{"name":"Jason Lee","id":123456,"enabled":true,"float":1.23,"profile":{"city":"Chengdu"},"tags":["Navi","Rust"],"null":null}`;
    assert_eq try! json.to_string(user, pretty: true), `{\n  "name": "Jason Lee",\n  "id": 123456,\n  "enabled": true,\n  "float": 1.23,\n  "profile": {\n    "city": "Chengdu"\n  },\n  "tags": [\n    "Navi",\n    "Rust"\n  ],\n  "null": null\n}`;
}

test "from_reader" {
    let reader = Cursor.new(`{
        "city": "Chengdu"
    }`.bytes());
    let profile = try! json.from_reader::<Profile>(reader);
    assert_eq profile.city, "Chengdu";

    let user = try! json.from_reader::<User>(fs.open(path.join("tests/fixtures", "user.json")));
    assert_eq user.name, "Jason Lee";
}

test "from_bytes" {
    let bytes = `{
        "city": "Chengdu"
    }`.bytes();
    let profile = try! json.from_bytes::<Profile>(bytes);
    assert_eq profile.city, "Chengdu";
}

test "to_writer" {
    let user = User {
        name: "Jason Lee",
        id: 123456,
        enabled: true,
        float: 1.23,
        profile: Profile { city: "Chengdu" },
        tags: { "Navi", "Rust" },
        null: nil
    };

    let buf = StringBuffer.new();
    try! json.to_writer(buf, user);
    assert_eq buf.to_string(), `{"name":"Jason Lee","id":123456,"enabled":true,"float":1.23,"profile":{"city":"Chengdu"},"tags":["Navi","Rust"],"null":null}`;
}
