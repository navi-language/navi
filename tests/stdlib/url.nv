use std.url;

test "parse" {
    let my_url = url.parse("http://navi-lang.org");
    assert_ne my_url, nil;

    let my_url = url.parse("http://navi-lang.org/foo/bar?id=1&name=foo");
    assert_ne my_url, nil;

    let my_url = url.parse("http://navi-lang.org/foo/bar?id=1&name=foo#this-is-hash");
    assert_ne my_url, nil;

    let my_url = url.parse("this-is-bad-url");
    assert_eq my_url, nil;
}

test "to_string" {
    let my_url = url.parse("http://navi-lang.org")!;
    assert_eq my_url.to_string(), "http://navi-lang.org";

    let my_url = url.parse("http://navi-lang.org/foo/bar?id=1&name=foo")!;
    assert_eq my_url.to_string(), "http://navi-lang.org/foo/bar?id=1&name=foo";

    let my_url = url.parse("https://navi-lang.org:8080/foo/bar?id=1&name=foo#this-is-hash")!;
    assert_eq my_url.to_string(), "https://navi-lang.org:8080/foo/bar?id=1&name=foo#this-is-hash";
}

test "URL - string_interpolation" {
    let my_url = url.parse("http://navi-lang.org")!;
    assert_eq `${my_url}`, "http://navi-lang.org";
}

test "scheme / set_scheme" {
    let my_url = url.parse("http://navi-lang.org")!;
    assert_eq my_url.scheme, "http";

    let my_url = url.parse("https://navi-lang.org")!;
    assert_eq my_url.scheme, "https";

    my_url.scheme = "ftp";
    assert_eq my_url.scheme, "ftp";
    assert_eq my_url.to_string(), "ftp://navi-lang.org";

    my_url.scheme = "navi";
    assert_eq my_url.scheme, "ftp";

    // custom scheme
    let my_url = url.parse("navi://navi-lang.org")!;
    assert_eq my_url.scheme, "navi";
    assert_eq my_url.to_string(), "navi://navi-lang.org";

    my_url.scheme = "vscode";
    assert_eq my_url.scheme, "vscode";
    assert_eq my_url.to_string(), "vscode://navi-lang.org";

    my_url.scheme = "http";
    assert_eq my_url.scheme, "vscode";
}

test "host / set_host" {
    let my_url = url.parse("http://navi-lang.org")!;
    assert_eq my_url.host, "navi-lang.org";

    let my_url = url.parse("http://navi-lang.org/foo/bar?id=1&name=foo")!;
    assert_eq my_url.host, "navi-lang.org";

    my_url.host = "navi-lang.org";
    assert_eq my_url.host, "navi-lang.org";
    assert_eq my_url.to_string(), "http://navi-lang.org/foo/bar?id=1&name=foo";
}

test "port / set_port" {
    let my_url = url.parse("http://navi-lang.org")!;
    assert_eq my_url.port, 80;

    let my_url = url.parse("https://navi-lang.org")!;
    assert_eq my_url.port, 443;

    let my_url = url.parse("ws://navi-lang.org")!;
    assert_eq my_url.port, 80;

    let my_url = url.parse("wss://navi-lang.org")!;
    assert_eq my_url.port, 443;

    let my_url = url.parse("ftp://navi-lang.org")!;
    assert_eq my_url.port, 21;

    let my_url = url.parse("vscode://navi-lang.org")!;
    assert_eq my_url.port, 0;

    let my_url = url.parse("http://navi-lang.org:8080")!;
    assert_eq my_url.port, 8080;

    my_url.port = 8081;
    assert_eq my_url.port, 8081;
    assert_eq my_url.to_string(), "http://navi-lang.org:8081";
}

test "path / set_path" {
    let my_url = url.parse("http://navi-lang.org")!;
    assert_eq my_url.path, "/";

    let my_url = url.parse("http://navi-lang.org/foo/bar?id=1&name=foo")!;
    assert_eq my_url.path, "/foo/bar";

    my_url.path = "/foo/bar/baz";
    assert_eq my_url.path, "/foo/bar/baz";
    assert_eq my_url.to_string(), "http://navi-lang.org/foo/bar/baz?id=1&name=foo";
}

test "query / set_query" {
    let my_url = url.parse("http://navi-lang.org")!;
    assert_eq my_url.query, "";

    let my_url = url.parse("http://navi-lang.org/foo/bar?id=1&name=foo")!;
    assert_eq my_url.query, "id=1&name=foo";

    my_url.query = "id=2&name=bar";
    assert_eq my_url.query, "id=2&name=bar";
    assert_eq my_url.to_string(), "http://navi-lang.org/foo/bar?id=2&name=bar";
}

test "fragment / set_fragment" {
    let my_url = url.parse("http://navi-lang.org")!;
    assert_eq my_url.fragment, "";

    let my_url = url.parse("http://navi-lang.org/foo/bar?id=1&name=foo#this-is-hash")!;
    assert_eq my_url.fragment, "this-is-hash";

    my_url.fragment = "this-is-new-hash";
    assert_eq my_url.fragment, "this-is-new-hash";
    assert_eq my_url.to_string(), "http://navi-lang.org/foo/bar?id=1&name=foo#this-is-new-hash";
}

test "username && password" {
    let my_url = url.parse("redis://localhost:6379")!;
    assert_eq my_url.username, "";
    assert_eq my_url.password, "";

    let my_url = url.parse("redis://user:pass@localhost:6379")!;
    assert_eq my_url.username, "user";
    assert_eq my_url.password, "pass";

    my_url.username = "new-user";
    my_url.password = "new-pass";
    assert_eq my_url.username, "new-user";
    assert_eq my_url.password, "new-pass";
    assert_eq my_url.to_string(), "redis://new-user:new-pass@localhost:6379";
}

test "set all" {
    let my_url = url.parse("http://navi-lang.org")!;

    my_url.scheme = "https";
    my_url.host = "github.com";
    my_url.port = 8080;
    my_url.path = "/navi-lang/navi";
    my_url.query = "id=1&name=foo";
    my_url.fragment = "this-is-hash";
    my_url.username = "user";
    my_url.password = "pass";

    assert_eq my_url.to_string(), "https://user:pass@github.com:8080/navi-lang/navi?id=1&name=foo#this-is-hash";
}

test "join" {
    let my_url = url.parse("http://navi-lang.org")!;
    let new_url = my_url.join("/foo/bar");

    assert_eq new_url.to_string(), "http://navi-lang.org/foo/bar";
    assert_eq my_url.to_string(), "http://navi-lang.org";
}
