use std.fs.{self, File};
use std.io.{self, Buffer, Bytes};
use std.time.DateTime;
use std.{env, path};

use utils.{cleanup_tmpdir, fixture, tmp_filepath};

test "fs.read" {
    let buf = try! fs.read(path.join("tests/fixtures", "hello.txt"));
    assert_eq buf.to_string(), "Hello, world!\n";
}

test "fs.read_to_string" {
    let s = try! fs.read_to_string(path.join("tests/fixtures", "hello.txt"));
    assert_eq s, "Hello, world!\n";
}

test "fs.open" {
    let f = try! fs.open(path.join("tests/fixtures", "hello.txt"));
    assert_eq try! f.read_to_string(), "Hello, world!\n";
    try f.close();
}

test "fs.write" {
    let f = tmp_filepath("test-std-file-write.txt");
    try! fs.write(f, "Hello, world!\n");
    assert_eq try! fs.read_to_string(f), "Hello, world!\n";
    cleanup_tmpdir();
}

test "fs.write_bytes" {
    let f = tmp_filepath("test-std-file-write.txt");
    try! fs.write_bytes(f, "Hello, world!\n".bytes());
    assert_eq try! fs.read_to_string(f), "Hello, world!\n";
    cleanup_tmpdir();

    let f = tmp_filepath("test-std-file-write.txt");
    try! fs.write(f, "Hello, world!\n".bytes());
    assert_eq try! fs.read_to_string(f), "Hello, world!\n";
    cleanup_tmpdir();
}

test "fs.write_string" {
    let f = tmp_filepath("test-std-file-write.txt");
    try! fs.write_string(f, "Hello, world!\n");
    assert_eq try! fs.read_to_string(f), "Hello, world!\n";
    cleanup_tmpdir();

    let f = tmp_filepath("test-std-file-write.txt");
    try! fs.write(f, "Hello, world!\n");
    assert_eq try! fs.read_to_string(f), "Hello, world!\n";
    cleanup_tmpdir();
}

test "File.open" {
    let f = try! File.open(path.join("tests/fixtures", "hello.txt"));
    assert_eq try! f.read_to_string(), "Hello, world!\n";
    try f.close();
}

test "read_to_end" {
    let f = fixture("hello.txt");
    let buf = Buffer.new();
    let n = try! f.read_to_end(buf);
    assert_eq n, 14;
    assert_eq buf.to_string(), "Hello, world!\n";
    try f.close();
}

test "read" {
    let f = fixture("hello.txt");
    let buf = Bytes.new(5);
    let n = try! f.read(buf);
    assert_eq n, 5;
    assert_eq buf.to_string(), "Hello";
    try f.close();
}

test "read_to_string" {
    let f = fixture("hello.txt");
    let s = try! f.read_to_string();
    assert_eq s, "Hello, world!\n";
    try f.close();
}

test "File -> string_interpolation" {
    let f = fixture("hello.txt");
    assert_eq `file: ${f}`, "file: <std.fs.File>";
}

test "fs.create & write_string & write & remove_file & flush" {
    let p = tmp_filepath("test-std-file-write.txt");
    let f = try! fs.create(p);

    // Write a string
    try! f.write_string("Hello");
    // Write a bytes
    let n = try! f.write(", world!".bytes());
    assert_eq n, 8;
    // Write a byte \n
    try! f.write_byte(10);
    // Build a buf
    let buf = Buffer.new();
    try! buf.write_string("This is Navi.");
    try! f.write_buffer(buf);

    // Close
    try f.close();

    let f = try! File.open(p);
    let buf = Buffer.new();
    try! f.read_to_end(buf);
    try f.close();
    assert_eq buf.to_string(), "Hello, world!\nThis is Navi.";

    try! fs.remove_file(p);
    assert !path.exists(p);

    cleanup_tmpdir();
}

test "File.create" {
    let p = tmp_filepath("test-std-file-create.txt");
    let f = try! File.create(p);
    assert path.exists(p);
    cleanup_tmpdir();
}

test "create_dir & create_dir_all" {
    let p = tmp_filepath("fs/test-std-file-create_dir");
    try! fs.create_dir(p);
    assert path.exists(p);

    let p = path.join(tmp_filepath("fs"), "foo/bar/dar");
    try! fs.create_dir_all(p);
    assert path.exists(tmp_filepath("fs/foo"));
    assert path.exists(tmp_filepath("fs/foo/bar"));
    assert path.exists(tmp_filepath("fs/foo/bar/dar"));

    cleanup_tmpdir();
}

test "remove_dir & remove_dir_all" {
    let p = tmp_filepath("fs/test-std-file-remove_dir");
    try! fs.create_dir(p);
    assert path.exists(p);
    try! fs.remove_dir(p);
    assert !path.exists(p);

    let p = path.join(tmp_filepath("fs"), "foo/bar/dar");
    try! fs.create_dir_all(p);
    assert path.exists(p);

    try! fs.remove_dir_all(tmp_filepath("fs/foo"));
    assert !path.exists(tmp_filepath("fs/foo"));
}

test "metadata" {
    let t = DateTime.now() - 1.seconds();

    let p = tmp_filepath("fs/test-std-file-metadata");
    let f = try! File.create(p);
    try f.write_string("hello world!");
    try f.flush();

    let meta = try! fs.metadata(p);
    assert meta.created()! >= t;
    assert meta.modified()! >= t;
    assert meta.accessed()! >= t;
    assert_eq meta.len(), 12;
    assert_eq meta.is_file(), true;
    assert_eq meta.is_dir(), false;
    assert_eq meta.is_symlink(), false;

    cleanup_tmpdir();
}

test "glob" {
    let paths = [string] {};
    let exts = [string] {};
    try! fs.glob("tests/**/*.nv", |p| {
        paths.push(p);
        exts.push(path.extension(p));
    });

    assert paths.len() > 0;

    if (env.platform() == "windows") {
        assert paths.contains("tests\\stdlib\\json.nv");
        assert paths.contains("tests\\stdlib\\fs.nv");
    } else {
        assert paths.contains("tests/stdlib/json.nv");
        assert paths.contains("tests/stdlib/fs.nv");
    }

    exts.unique();
    assert exts.len() == 1;
    assert exts.contains("nv");
}

fn assert_read(reader: io.Read, expect: string) {
    let buf = Buffer.new();
    let n = try! reader.read_to_end(buf);
    assert_eq n, 14;
    assert_eq buf.to_string(), expect;

}

fn assert_write(writer: io.Write, expect: string) {
    let n = try! writer.write(expect.bytes());
    assert_eq n, expect.len();
}

test "std.io.Read" {
    let f = fixture("hello.txt");
    assert_read(f, "Hello, world!\n");
}

test "std.io.Write" {
    let p = tmp_filepath("test-std-io-write.txt");
    let f = try! File.create(p);
    assert_write(f, "Hello, world!\n");
    try f.close();
    assert_eq try! fs.read_to_string(p), "Hello, world!\n";
    cleanup_tmpdir();
}
