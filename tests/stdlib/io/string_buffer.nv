use std.io.{self, StringBuffer};

test "StringBuffer.new" {
    let buf = StringBuffer.new();
    buf.push("hello world");
    assert_eq buf.to_string(), "hello world";
}

test "write_string" {
    let buf = StringBuffer.new();
    buf.write_string("hello");
    buf.write_string(" 世界");
    assert_eq buf.to_string(), "hello 世界";
}

test "push" {
    let buf = StringBuffer.new();
    buf.push("hello");
    buf.push(" ");
    buf.push("world");
    assert_eq buf.to_string(), "hello world";
}

test "reset" {
    let buf = StringBuffer.new();
    buf.push("hello");
    assert_eq buf.len(), 5;
    buf.reset();
    assert_eq buf.len(), 0;
}

test "len" {
    let buf = StringBuffer.new();
    buf.push("hello world");
    assert_eq buf.len(), 11;

    let buf = StringBuffer.new();
    buf.push("hello 你好");
    assert_eq buf.len(), 12;
}

test "to_string" {
    let buf = StringBuffer.new();
    buf.push("hello");
    buf.push(" ");
    buf.push("world");
    assert_eq buf.to_string(), "hello world";
}

test "truncate" {
    let buf = StringBuffer.new();
    buf.push("hello world");
    buf.truncate(5);
    assert_eq buf.len(), 5;
    assert_eq buf.to_string(), "hello";
}

test "bytes" {
    let buf = StringBuffer.new();
    buf.push("hello world");
    let bytes = buf.bytes();
    assert_eq bytes.to_string(), "hello world";
}
