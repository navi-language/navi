use std.io.{self, Bytes, Cursor, IoError};
use std.str.Utf8Error;
use std.testing.assert_throws;

fn assert_read_cursor(reader: io.Read, len: int): string throws IoError, Utf8Error {
    let buf = try reader.read_exact(len);
    return buf.to_string();
}

test "new" {
    let cursor = Cursor.new("hello world");

    assert_eq try! assert_read_cursor(cursor, 0), "";
    assert_eq try! assert_read_cursor(cursor, 5), "hello";
    assert_eq try! assert_read_cursor(cursor, 1), " ";
    assert_eq try! assert_read_cursor(cursor, 5), "world";
    assert_throws(|| {
        try assert_read_cursor(cursor, 3);
    }, "unexpected EOF");

    let cursor = Cursor.new("hello world");
    assert_eq try! assert_read_cursor(cursor, 0), "";
    assert_eq try! assert_read_cursor(cursor, 5), "hello";
    assert_eq try! assert_read_cursor(cursor, 1), " ";
    assert_eq try! assert_read_cursor(cursor, 5), "world";
}

test "read missmatched buff size" {
    let bytes = "hello world".bytes();
    let cursor = Cursor.new(bytes);
    let buf = Bytes.new(len: 1024);
    try cursor.read(buf);
    let str = buf.to_string();
    assert_eq str.slice(0, 11), "hello world";
    assert_eq str.len(), 1024;
}
