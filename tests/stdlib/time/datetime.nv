use std.env;
use std.io;
use std.time.{self, DateTime};

test "timestramp" {
    let t = DateTime.now();
    assert t.timestamp() > 1695296020, "timestamp should be greater than 1695296020";
}

test "DateTime - string_interpolation" {
    let t = try! DateTime.parse("2023-04-13 09:45:26 +08:00");
    assert_eq t.to_string(), "2023-04-13T09:45:26+08:00";
    assert_eq `${t}`, "2023-04-13T09:45:26+08:00";
}

test "DateTime.parse" {
    let t = try! DateTime.parse("2023-04-13 09:45:26 +08:00");
    assert_eq t.timestamp(), 1681350326;

    let t = try! DateTime.parse("2023.04.13 Time: 14:08", format: "%Y.%m.%d Time: %H:%M");
    assert_eq t.to_string(), "2023-04-13T14:08:00Z";
}

test "parse" {
    let t = try! DateTime.parse("2023-04-13 09:45:26");
    assert_eq t.timestamp(), 1681379126;
    assert_eq t.format("%Y-%m-%d"), "2023-04-13";
    assert_eq t.format("%Y/%m/%d %H:%M"), "2023/04/13 09:45";

    let t = try! DateTime.parse("2023-04-13 09:45:26 +08:00");
    assert_eq t.timestamp(), 1681350326;
    assert_eq t.timezone(), "+08:00";

    let t = try! DateTime.parse("2023-04-13 09:45:26.123456789 -02:00");
    assert_eq t.timestamp(), 1681386326;
    assert_eq t.nanosecond(), 123456789;
    assert_eq t.timezone(), "-02:00";

    let t = try! DateTime.parse("2023-04-13 09:45:59.231 +08:00");
    assert_eq t.timestamp(), 1681350359;
    assert_eq t.millisecond(), 231;
    assert_eq t.microsecond(), 231000;
    assert_eq t.timezone(), "+08:00";
}

test "parse with RFC3339" {
    let t = try! DateTime.parse("2023-04-13T14:08:33-11:00");
    assert_eq t.timestamp(), 1681434513;
    let t = try! DateTime.parse("2023-04-13T14:08:33+11:00");
    assert_eq t.timestamp(), 1681355313;
}

test "iso8601 / to_string" {
    let t = try! DateTime.parse("2023-04-13 09:45:26 +07:00");
    // to_string is original timezone
    assert_eq t.to_string(), "2023-04-13T09:45:26+07:00";
    // iso8601 is local timezone
    if (env.get("CI") == "") {
        assert_eq t.iso8601(), "2023-04-13T10:45:26+08:00";
    }
}

test "from_timestamp" {
    let t = DateTime.from_timestamp(1681355313);
    assert_eq t.to_string(), "2023-04-13T03:08:33Z";
}

test "inspect" {
    let t = try! DateTime.parse("2023-04-13 09:45:26 +07:00");
    assert_eq `time: ${t}`, "time: 2023-04-13T09:45:26+07:00";
}

test "year / month / day / hour / minute / second / millisecond / microsecond / nanosecond" {
    let t = try! DateTime.parse("2023-04-13 09:45:26.123456789 +08:00");
    assert_eq t.year(), 2023;
    assert_eq t.month(), 4;
    assert_eq t.day(), 13;
    assert_eq t.hour(), 9;
    assert_eq t.minute(), 45;
    assert_eq t.second(), 26;
    assert_eq t.millisecond(), 123;
    assert_eq t.microsecond(), 123456;
    assert_eq t.nanosecond(), 123456789;
}

test "weekday" {
    let t = try! DateTime.parse("2023-10-29 09:45:26 +08:00");
    assert_eq t.weekday(), 7;
    let t = try! DateTime.parse("2023-10-30 09:45:26 +08:00");
    assert_eq t.weekday(), 1;
    let t = try! DateTime.parse("2023-10-31 09:45:26 +08:00");
    assert_eq t.weekday(), 2;
    let t = try! DateTime.parse("2023-11-04 09:45:26 +08:00");
    assert_eq t.weekday(), 6;
}

test "timezone" {
    let t = try! DateTime.parse("2023-04-13 09:45:26 +08:00");
    assert_eq t.timezone(), "+08:00";

    let t = try! DateTime.parse("2023-04-13 09:45:26 -12:30");
    assert_eq t.timezone(), "-12:30";
}

test "sub" {
    let t1 = try! DateTime.parse("2023-04-13 09:45:26.129 +08:00");
    let t2 = try! DateTime.parse("2023-04-13 09:45:59.231 +08:00");

    assert_eq t2.sub(t1), 33102.milliseconds();
    assert_eq t1.sub(t2), (-33102).milliseconds();

    let t1 = try! DateTime.parse("2023-04-13 09:45:26 +08:00");
    let t2 = try! DateTime.parse("2023-04-13 09:45:59 +08:00");
    assert_eq t2.sub(t1), 33.seconds();
    assert_eq t1.sub(t2), (-33).seconds();
}

test "calculation" {
    let t1 = try! DateTime.parse("2023-04-13 09:45:26.129 +08:00");
    let t2 = try! DateTime.parse("2023-04-13 09:45:59.231 +08:00");
    let t3 = try! DateTime.parse("2023-04-13 09:45:26.129 +08:00");

    // ==
    assert_eq t1 == t2, false;
    // !=
    assert_eq t1 != t2, true;

    // >
    assert_eq t1 > t2, false;
    assert_eq t1 > t3, false;
    assert_eq t2 > t1, true;
    assert_eq t3 > t1, false;

    // >=
    assert_eq t1 >= t2, false;
    assert_eq t1 >= t3, true;
    assert_eq t2 >= t1, true;
    assert_eq t3 >= t1, true;

    // <
    assert_eq t1 < t2, true;
    assert_eq t1 < t3, false;
    assert_eq t2 < t1, false;

    // <=
    assert_eq t1 <= t2, true;
    assert_eq t1 <= t3, true;
    assert_eq t2 <= t1, false;
    assert_eq t3 <= t1, true;

    // + i64 seconds
    assert_eq t1 + 33.seconds(), try! DateTime.parse("2023-04-13 09:45:59.129 +08:00");

    // - i64 seconds
    assert_eq t2 - 35.seconds(), try! DateTime.parse("2023-04-13 09:45:24.231 +08:00");
}

test "utc" {
    let t = try! DateTime.parse("2023-04-13 09:45:26.123456789 +08:00");
    let utc_t = t.utc();
    assert_eq utc_t.hour(), 1;
    assert_eq utc_t.to_string(), "2023-04-13T01:45:26.123456789Z";
}

test "to_offset" {
    let t = try! DateTime.parse("2023-04-13 09:45:26.123456789 +08:00");
    let utc_t = t.to_offset("+00:00");
    assert_eq utc_t.hour(), 1;
    assert_eq utc_t.minute(), 45;
    assert_eq utc_t.to_string(), "2023-04-13T01:45:26.123456789Z";

    // Pacific Time
    let t1 = t.to_offset("-08:00");
    assert_eq t1.hour(), 17;
    assert_eq t1.minute(), 45;
    assert_eq t1.to_string(), "2023-04-12T17:45:26.123456789-08:00";

    // New Delhi
    let t2 = t.to_offset("+05:30");
    assert_eq t2.hour(), 7;
    assert_eq t2.minute(), 15;
    assert_eq t2.to_string(), "2023-04-13T07:15:26.123456789+05:30";
}

test "sort_by date" {
    let dates = try [time.DateTime] {
        DateTime.parse("2023-04-08 09:45:26 +08:00"),
        DateTime.parse("2023-04-13 09:45:26 +08:00"),
        DateTime.parse("2023-04-01 09:45:26 +08:00"),
        DateTime.parse("2023-04-01 09:45:30 +08:00")
    };

    dates.sort_by(|a, b| {
        return a > b;
    });
    assert_eq dates[0].to_string(), "2023-04-13T09:45:26+08:00";
    assert_eq dates[1].to_string(), "2023-04-08T09:45:26+08:00";
    assert_eq dates[2].to_string(), "2023-04-01T09:45:30+08:00";
    assert_eq dates[3].to_string(), "2023-04-01T09:45:26+08:00";

    let dates = try [time.DateTime] {
        DateTime.parse("2023-04-08 09:45:26 +08:00"),
        DateTime.parse("2023-04-13 09:45:26 +08:00"),
        DateTime.parse("2023-04-01 09:45:26 +08:00"),
        DateTime.parse("2023-04-01 09:45:30 +08:00")
    };
    dates.sort_by(|a, b| {
        return a < b;
    });

    assert_eq dates[0].to_string(), "2023-04-01T09:45:26+08:00";
    assert_eq dates[1].to_string(), "2023-04-01T09:45:30+08:00";
    assert_eq dates[2].to_string(), "2023-04-08T09:45:26+08:00";
    assert_eq dates[3].to_string(), "2023-04-13T09:45:26+08:00";

}
