use std.collections.map;

struct Item {
    name: string
}

test "map.new::<int, string>" {
    let a = map.new::<int, string>();
    a.set(1, "a");
    a.set(2, "B");
    a.set(3, "c");
    a.set(2, "B1");

    assert_eq a.get(1), "a";
    assert_eq a.get(2), "B1";
    assert_eq a.get(3), "c";
    assert_eq a.get(4), nil;

    a[2] = "B";
    assert_eq `${a}`, `{1: a, 2: B, 3: c}`;

    // use the [] to get
    assert_eq a[2], "B";
    // FIXME: assert this will panic
    // assert_eq a[4], nil;

    assert_eq a.len(), 3;

    // clear
    a.clear();
    assert a.is_empty();
}

test "<string, string>" {
    let a = <string, string> {};
    a.set("name", "Jason Lee");
    a.set("city", "Wuhan");
    a.set("city", "Chengdu");
    a.set("foo", "Foo Bar");

    assert_eq a.get("name"), "Jason Lee";
    assert_eq a.get("city"), "Chengdu";
    assert_eq a.get("not-exist"), nil;

    a["city"] = "Wuhan";
    assert_eq `${a}`, `{name: Jason Lee, city: Wuhan, foo: Foo Bar}`;

    assert_eq a["city"], "Wuhan";
    // FIXME: assert this will panic
    // assert_eq a["age"], nil;

    assert_eq a.len(), 3;
    a.remove("foo");
    assert_eq a.len(), 2;
    assert_eq a.get("foo"), nil;
    // FIXME: assert this will panic
    // assert_eq a["foo"], nil;
}

test "get & [] | set & []=" {
    let items = <string, string> {};
    items.set("name", "Jason Lee");
    assert_eq items["name"], "Jason Lee";
    assert_eq items.get("not-exist"), nil;
    assert_eq items.get("name"), "Jason Lee";

    items.set("name", "Sunli");
    assert_eq items["name"], "Sunli";
    items["city"] = "Wuhan";
    assert_eq items["city"], "Wuhan";

    let items = <int, int> { 1: 192 };
    assert_eq items[1], 192;
    assert_eq items.get(2), nil;
}

test "keys" {
    let items = <int, string> {};
    items.set(1, "a");
    items.set(2, "b");
    items.set(3, "c");

    let keys = items.keys();
    assert_eq keys.len(), 3;
    assert_eq keys[0], 1;
    assert_eq keys[1], 2;
    assert_eq keys[2], 3;

    assert_eq items.keys().len(), 3;
}

test "values" {
    let items = <int, string> {};
    items.set(1, "a");
    items.set(2, "b");
    items.set(3, "c");

    let values = items.values();
    assert_eq values.len(), 3;
    assert_eq values[0], "a";
    assert_eq values[1], "b";
    assert_eq values[2], "c";

    let items = <string, Item> {};
    items.set("a", Item { name: "a" });
    items.set("b", Item { name: "b" });

    let values = items.values();
    assert_eq values.len(), 2;

    assert_eq items.values().len(), 2;
}

test "struct value" {
    let items = <string, Item> {};
    items.set("a", Item { name: "a" });
    items.set("b", Item { name: "b" });

    assert_eq items.get("a")?.name, "a";
}

test "clear" {
    let items = <string, string> { "name": "Jason", "city": "Chengdu" };

    assert_eq items.len(), 2;
    items.clear();
    assert_eq items.len(), 0;
}

test "clone" {
    let items = <string, string> { "name": "Jason", "city": "Chengdu" };
    let items2 = items.clone();
    items["name"] = "Sunli";
    items2["city"] = "Wuhan";

    assert_eq items["name"], "Sunli";
    assert_eq items["city"], "Chengdu";

    assert_eq items2["name"], "Jason";
    assert_eq items2["city"], "Wuhan";
}

test "iter k, v in map" {
    let items = <string, string> { "title": "Navi", "url": "https://navi-lang.org" };

    let result = [string] {};
    for (let k, v in items) {
        result.push(`${k}: ${v}`);
    }
    assert_eq result.join(", "), "title: Navi, url: https://navi-lang.org";
}
