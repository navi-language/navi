use std.net.ip_addr_v4;
use std.net.ip_addr_v6;
use std.net.socket_addr_v4;
use std.net.socket_addr_v6;

// test cases for socket_addr_v4
// test "socket_addr_v4 parse"
test "socket_addr_v4 parse" {
    let addr = socket_addr_v4.parse("127.0.0.1:8080");
    assert_ne addr, nil;

    let addr = socket_addr_v4.parse("192.168.88.1:80");
    assert_ne addr, nil;

    // FIXME: this should be nil
    // let addr = socket_addr_v4.parse("this-is-bad-socket-addr");
    // assert_eq addr, nil;
}

test "socket_addr_v4 new" {
    let addr = socket_addr_v4.new(ip_addr_v4.new(127, 0, 0, 1), 8080);
    assert_eq addr.to_string(), "127.0.0.1:8080";

    let addr = socket_addr_v4.new(ip_addr_v4.new(192, 168, 88, 1), 80);
    assert_eq addr.to_string(), "192.168.88.1:80";
}

test "socket_addr_v4 eq" {
    let addr1 = socket_addr_v4.new(ip_addr_v4.new(127, 0, 0, 1), 8080);
    let addr2 = socket_addr_v4.parse("127.0.0.1:8080")!;
    assert_eq addr1, addr2;

    let addr1 = socket_addr_v4.new(ip_addr_v4.new(192, 168, 88, 1), 80);
    let addr2 = socket_addr_v4.parse("192.168.88.1:80")!;
    assert_eq addr1, addr2;
}

test "socket_addr_v4 ip" {
    let addr = socket_addr_v4.parse("127.0.0.1:8080")!;
    assert_eq addr.ip(), ip_addr_v4.new(127, 0, 0, 1);

    let addr = socket_addr_v4.parse("192.168.88.1:80")!;
    assert_eq addr.ip(), ip_addr_v4.new(192, 168, 88, 1);
}

test "socket_addr_v4 port" {
    let addr = socket_addr_v4.parse("127.0.0.1:8080")!;
    assert_eq addr.port(), 8080;

    let addr = socket_addr_v4.parse("192.168.88.1:80")!;
    assert_eq addr.port(), 80;

    let addr = socket_addr_v4.parse("192.168.88.1:17777")!;
    assert_eq addr.port(), 17777;
}

test "socket_addr_v4 to_string" {
    let addr = socket_addr_v4.new(ip_addr_v4.new(127, 0, 0, 1), 8080);
    assert_eq addr.to_string(), "127.0.0.1:8080";

    let addr = socket_addr_v4.new(ip_addr_v4.new(192, 168, 88, 1), 80);
    assert_eq addr.to_string(), "192.168.88.1:80";
}

test "socket_addr_v4 set_ip" {
    let addr = socket_addr_v4.parse("127.0.0.1:8080")!;
    assert_eq addr.ip(), ip_addr_v4.new(127, 0, 0, 1);

    addr.set_ip(ip_addr_v4.new(192, 168, 88, 1));
    assert_eq addr.ip(), ip_addr_v4.new(192, 168, 88, 1);
    assert_eq addr.to_string(), "192.168.88.1:8080";
}

test "socket_addr_v4 set_port" {
    let addr = socket_addr_v4.parse("127.0.0.1:8080")!;
    assert_eq addr.port(), 8080;

    addr.set_port(80);
    assert_eq addr.port(), 80;
    assert_eq addr.to_string(), "127.0.0.1:80";
}

// test cases for socket_addr_v6
// test "socket_addr_v6 parse"
test "socket_addr_v6 parse" {
    let addr = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr.to_string(), "[::1]:8080";

    let addr = socket_addr_v6.parse("[::1]:80")!;
    assert_eq addr.to_string(), "[::1]:80";

    let addr = socket_addr_v6.parse("[::1]:17777")!;
    assert_eq addr.to_string(), "[::1]:17777";

    let addr = socket_addr_v6.parse("[::1]:65535")!;
    assert_eq addr.to_string(), "[::1]:65535";

    let addr = socket_addr_v6.parse("[::1]:0")!;
    assert_eq addr.to_string(), "[::1]:0";

    // FIXME: this should be nil
    let addr = socket_addr_v6.parse("[::1]:-1");
    assert_eq addr, nil;

    let addr = socket_addr_v6.parse("[::1]:65536");
    assert_eq addr, nil;
}

test "socket_addr_v6 new" {
    let addr = socket_addr_v6.new(ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 78);
    assert_eq addr.to_string(), "[::1%78]:8080";

    let addr = socket_addr_v6.new(ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1), 80, 10, 0);
    assert_eq addr.to_string(), "[::1]:80";
}

test "socket_addr_v6 eq" {
    let addr1 = socket_addr_v6.new(ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);
    let addr2 = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr1, addr2;

    let addr1 = socket_addr_v6.new(ip_addr_v6.new(8193, 3512, 0, 0, 0, 0, 0, 1), 8080, 0, 0);
    let addr2 = socket_addr_v6.parse("[2001:db8::1]:8080")!;
    assert_eq addr1, addr2;

    let addr1 = socket_addr_v6.new(ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1), 80, 10, 0);
    let addr2 = socket_addr_v6.parse("[::1]:80")!;
    let addr3 = socket_addr_v6.new(ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1), 80, 10, 78);
    assert_ne addr1, addr2;
    assert_ne addr1, addr3;
}

test "socket_addr_v6 ip" {
    let addr = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr.ip(), ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1);

    let addr = socket_addr_v6.parse("[2001:db8::1]:8080")!;
    assert_eq addr.ip(), ip_addr_v6.new(8193, 3512, 0, 0, 0, 0, 0, 1);
}

test "socket_addr_v6 port" {
    let addr = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr.port(), 8080;

    let addr = socket_addr_v6.parse("[::1]:80")!;
    assert_eq addr.port(), 80;

    let addr = socket_addr_v6.parse("[::1]:17777")!;
    assert_eq addr.port(), 17777;

    let addr = socket_addr_v6.parse("[::1]:65535")!;
    assert_eq addr.port(), 65535;

    let addr = socket_addr_v6.parse("[::1]:0")!;
    assert_eq addr.port(), 0;
}

test "socket_addr_v6 flow_label" {
    let addr = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr.flow_label(), 0;

    let addr = socket_addr_v6.new(ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1), 80, 10, 78);
    assert_eq addr.flow_label(), 10;
}

test "socket_addr_v6 scope_id" {
    let addr = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr.scope_id(), 0;

    let addr = socket_addr_v6.new(ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1), 80, 10, 78);
    assert_eq addr.scope_id(), 78;
}

test "socket_addr_v6 to_string" {
    let addr = socket_addr_v6.new(ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);
    assert_eq addr.to_string(), "[::1]:8080";

    let addr = socket_addr_v6.new(ip_addr_v6.new(8193, 3512, 0, 0, 0, 0, 0, 1), 8080, 0, 0);
    assert_eq addr.to_string(), "[2001:db8::1]:8080";

    // FIXME: this should be "[::1]:80%10"
    // let addr = socket_addr_v6.new(ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1), 80, 10, 0);
    // assert_eq addr.to_string(), "::1%10:80";
}

test "socket_addr_v6 set_ip" {
    let addr = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr.ip(), ip_addr_v6.new(0, 0, 0, 0, 0, 0, 0, 1);

    addr.set_ip(ip_addr_v6.new(8193, 3512, 0, 0, 0, 0, 0, 1));
    assert_eq addr.ip(), ip_addr_v6.new(8193, 3512, 0, 0, 0, 0, 0, 1);
    assert_eq addr.to_string(), "[2001:db8::1]:8080";
}

test "socket_addr_v6 set_port" {
    let addr = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr.port(), 8080;

    addr.set_port(80);
    assert_eq addr.port(), 80;
    assert_eq addr.to_string(), "[::1]:80";
}

test "socket_addr_v6 set_flow_label" {
    let addr = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr.flow_label(), 0;

    addr.set_flow_label(10);
    assert_eq addr.flow_label(), 10;
}

test "socket_addr_v6 set_scope_id" {
    let addr = socket_addr_v6.parse("[::1]:8080")!;
    assert_eq addr.scope_id(), 0;

    addr.set_scope_id(78);
    assert_eq addr.scope_id(), 78;
}