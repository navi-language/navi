use std.env;
use std.io;
use std.net.http.{self, Body, Headers};

use test_harness;

struct ResponseInfo {
    url: string,
    method: string,
    data: string,
    args: <string, string>,
    headers: <string, string>
}

test "request" {
    let server = test_harness.start_http_server();
    assert_eq server.addr.contains("127.0.0.1"), true, server.addr;

    // GET
    let headers = Headers.new();
    let query = <string, string> { "foo": "1", "bar": "Foo Bar" };
    let body = "";

    let res = try http.request("GET", server.url("/get"), headers:, query:, body:);

    let text = try res.text();
    assert_eq res.status(), 200, text;
    assert_eq res.headers().get("Content-Type"), "application/json; charset=utf-8";
    assert_eq text.contains("headers"), true;

    // POST
    let body = "Hello, world!";
    let res = try http.request("POST", server.url("/post"), headers:, body:, query:);
    assert_eq res.status(), 200;
    let text = try res.text();
    assert_eq text.contains("Hello, world!"), true, text;

    // PUT
    let body = "Hello, world!";
    let res = try http.request("PUT", server.url("/put"), headers:, query:, body:);
    assert_eq res.status(), 200;
    assert_eq try res.text().contains("Hello, world!"), true;

    // DELETE
    let body = "Hello, world!";
    let res = try http.request("DELETE", server.url("/delete"), headers:, query:, body:);
    assert_eq res.status(), 200;
    assert_eq try res.text().contains("Hello, world!"), true;

    // PATCH
    let body = "Hello, world!";
    let res = try http.request("PATCH", server.url("/patch"), headers:, query:, body:);
    assert_eq res.status(), 200;
    assert_eq try res.text().contains("Hello, world!"), true;

    // HEAD
    let body = "";
    let res = try http.request("HEAD", server.url("/get"), headers:, query:, body:);
    assert_eq res.status(), 200;
}

test "request with kw_args" {
    let server = test_harness.start_http_server();

    let res = try http.request("GET", server.url("/get"));
    assert_eq res.status(), 200;

    let headers = Headers.new();
    headers.set("FOO", "test-header");
    let res = try http.request("GET", server.url("/get"), headers: headers);
    assert_eq res.status(), 200;
    assert_eq try res.text().contains("test-header"), true;

    let query = <string, string> { "bar": "1", "foo": "FOO_BAR" };
    let res = try http.request("GET", server.url("/get"), headers: headers, query: query);
    assert_eq res.status(), 200;
    let text = try res.text();
    assert_eq text.contains(server.url("/get?bar=1&foo=FOO_BAR")), true, text;
}

test "head" {
    let server = test_harness.start_http_server();

    let headers = Headers.new();
    let query = <string, string> { "foo": "1", "bar": "Foo Bar" };
    let res = try http.head(server.url("/get"), headers: headers, query: query);
    assert_eq res.status(), 200;
}

test "get" {
    let server = test_harness.start_http_server();

    let headers = Headers.new();
    let query = <string, string> {
        "foo": "1",
        "bar": "Foo Bar",
        // same key twice
        "foo": "a"
    };
    let res = try http.get(server.url("/get"), headers: headers, query: query);
    assert_eq res.status(), 200;
    assert_eq res.headers().get("Content-Type"), "application/json; charset=utf-8";
    // Test query key order
    let text = try res.text();
    assert_eq text.contains(server.url("/get?bar=Foo+Bar&foo=a")), true, text;
}

test "post" {
    let server = test_harness.start_http_server();

    let headers = Headers.new();
    let query = <string, string> { "foo": "1", "bar": "Foo Bar" };
    let body = "Hello, world!";
    let res = try http.post(server.url("/post"), headers: headers, body:);
    assert_eq res.status(), 200;
    assert_eq try res.text().contains("Hello, world!"), true;

    let body = "Hello, world!";
    let res = try http.post(server.url("/post"), headers:, query:, body:);
    assert_eq res.status(), 200;
    let info = try res.json::<ResponseInfo>();
    assert_eq info.data, `Hello, world!`;
    assert_eq info.url, server.url("/post?bar=Foo+Bar&foo=1");
}

test "delete" {
    let server = test_harness.start_http_server();

    let headers = Headers.new();
    let body = "Hello, world!";
    let res = try http.delete(server.url("/delete"), headers: headers, body: body);
    assert_eq res.status(), 200;
    let text = try res.text();
    assert_eq text.contains("Hello, world!"), true;
}

test "put" {
    let server = test_harness.start_http_server();

    let headers = Headers.new();
    let body = "Hello, world!";
    let res = try http.put(server.url("/put"), headers: headers, body: body);
    assert_eq res.status(), 200;
    let text = try res.text();
    assert_eq text.contains("Hello, world!"), true;
}

test "patch" {
    let server = test_harness.start_http_server();

    let headers = Headers.new();
    let body = "Hello, world!";
    let res = try http.patch(server.url("/patch"), headers: headers, body: body);
    assert_eq res.status(), 200;
    assert_eq try res.text().contains("Hello, world!"), true;
}

test "response status" {
    let server = test_harness.start_http_server();

    let res = try http.get(server.url("/status/200"));
    assert_eq res.status(), 200;

    let res = try http.get(server.url("/status/302"));
    assert_eq res.status(), 302;

    let res = try http.get(server.url("/status/404"));
    assert_eq res.status(), 404;
    assert_eq res.status(), 404;

    let res = try http.get(server.url("/status/403"));
    assert_eq res.status(), 403;
}
