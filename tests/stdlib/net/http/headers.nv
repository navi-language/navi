use std.net.http.{self, HeaderMap, Headers};

test "new_headers" {
    let headers = Headers.new();
    headers.set("User-Agent", "navi-http/0.1.0");
    headers.set("Content-Type", "application/json");

    assert_eq headers.get("User-Agent"), "navi-http/0.1.0";
    assert_eq headers.get("Content-Type"), "application/json";

    // Other types
    headers.set("Int", 1234);
    assert_eq headers.get("Int"), "1234";
    headers.set("Float", 123.456);
    assert_eq headers.get("Float"), "123.456";
    headers.set("Bool", true);
    assert_eq headers.get("Bool"), "true";
    headers.set("Bool", false);
    assert_eq headers.get("Bool"), "false";
}

test "from" {
    let headers = Headers.new();
    headers.set("Foo", "foo bar");
    let new_headers = Headers.from(headers);
    assert_eq new_headers.len(), 1;
    assert_eq new_headers.get("Foo"), "foo bar";

    let header_map: HeaderMap = {
        "StringKey": "string val",
        "IntKey": 123,
        "FloatKey": 123.45,
        "BoolKey": true
    };
    let new_headers = Headers.from(header_map);
    assert_eq new_headers.len(), 4;
    assert_eq new_headers.get("StringKey"), "string val";
    assert_eq new_headers.get("IntKey"), "123";
    assert_eq new_headers.get("FloatKey"), "123.45";
    assert_eq new_headers.get("BoolKey"), "true";
}

test "to_string" {
    let headers = Headers.new();
    headers.set("Content-Type", "application/json");
    headers.set("User-Agent", "navi-http/0.1.0");

    let s = headers.to_string();
    assert_eq s, "content-type: application/json\r\nuser-agent: navi-http/0.1.0\r\n";
}

test "apppend" {
    let headers = Headers.new();
    headers.append("Accept-Encoding", "gzip");
    headers.append("Accept-Encoding", "deflate");
    headers.append("Accept-Encoding", "br");

    // invalid value, do nothing
    headers.append("Accept-Encoding", "\n");

    assert_eq headers.get("Accept-Encoding"), "gzip";
    assert_eq headers.get_all("Accept-Encoding").join(", "), "gzip, deflate, br";

    // Other types
    headers.append("Int", 1234);
    assert_eq headers.get("Int"), "1234";
    headers.append("Float", 123.456);
    assert_eq headers.get("Float"), "123.456";
    headers.append("Bool", true);
    assert_eq headers.get("Bool"), "true";
    headers.append("Bool1", false);
    assert_eq headers.get("Bool1"), "false";
}

test "set & set & remove" {
    let headers = Headers.new();
    headers.set("User-Agent", "navi-http/0.1.0");
    headers.set("Content-Type", "application/json");

    // invalid value, do nothing
    headers.set("Content-Type", "application/json\n");

    assert_eq headers.get("User-Agent"), "navi-http/0.1.0";
    assert_eq headers.get("Content-Type"), "application/json";
    assert_eq headers.get("not-exist-key"), nil;

    // case insensitive
    assert_eq headers.get("user-agent"), "navi-http/0.1.0";
    assert_eq headers.get("content-type"), "application/json";

    // Override
    headers.set("User-Agent", "navi-http/0.1.1");
    assert_eq headers.get("User-Agent"), "navi-http/0.1.1";

    // Override by case insensitive
    headers.set("user-agent", "navi-http/0.1.2");
    assert_eq headers.get("User-Agent"), "navi-http/0.1.2";
    assert_eq headers.get("user-agent"), "navi-http/0.1.2";

    // Remove
    headers.remove("User-Agent");
    assert_eq headers.get("User-Agent"), nil;
    assert_eq headers.get("foo-nil"), nil;
}

test "keys" {
    let headers = Headers.new();
    headers.set("User-Agent", "navi-http/0.1.0");
    headers.set("Content-Type", "application/json");

    let keys = headers.keys();
    keys.sort();
    assert_eq keys.len(), 2;
    assert_eq keys[0], "content-type";
    assert_eq keys[1], "user-agent";
}

test "len" {
    let headers = Headers.new();
    assert_eq headers.len(), 0;

    headers.set("User-Agent", "navi-http/0.1.0");
    headers.set("Content-Type", "application/json");
    assert_eq headers.len(), 2;
}

test "is_empty" {
    let headers = Headers.new();
    assert_eq headers.is_empty(), true;

    headers.set("User-Agent", "navi-http/0.1.0");
    assert_eq headers.is_empty(), false;
}

test "contains_key" {
    let headers = Headers.new();
    assert_eq headers.contains_key("User-Agent"), false;

    headers.set("User-Agent", "navi-http/0.1.0");
    assert_eq headers.contains_key("User-Agent"), true;
}
