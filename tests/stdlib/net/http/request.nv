use std.env;
use std.io.{self, Bytes, Cursor};
use std.json;
use std.net.http.{self, Body, Headers, Request};

use test_harness;

struct ResponseInfo {
    url: string?,
    method: string,
    data: string,
    args: <string, string>,
    headers: <string, string>,
}

struct ResponseAuth {
    authenticated: bool,
}

test "new_request" {
    let server = test_harness.start_http_server();
    let req = Request.new();
    assert_eq req.method, "GET";
    assert_eq req.url, "";

    let headers = Headers.new();
    headers.set("Content-Type", "application/json");
    headers.set("Accept-Encoding", "gzip, deflate");

    let query = {"foo": "bar", "baz": "1"};
    let body = "Hello World!";

    let req = Request.new(method: "GET", url: server.url("/get"), headers:, query:, body:);
    assert_eq req.method, "GET";
    assert_eq req.url, server.url("/get");
    assert_eq req.headers.get("Content-Type"), "application/json";
    assert_eq req.headers.get("Accept-Encoding"), "gzip, deflate";
    assert_eq req.query.get("foo"), "bar";
    assert_eq req.query.get("baz"), "1";
    assert_eq req.body!.(string), "Hello World!";

    let body = "Hello World!";
    let req = Request.new(method: "GET", url: server.url("/get"), headers:, query:, body:);
    assert_eq req.method, "GET";
    assert_eq req.url, server.url("/get");
    assert_eq req.headers.get("Content-Type"), "application/json";
    assert_eq req.headers.get("Accept-Encoding"), "gzip, deflate";
    assert_eq req.query.get("foo"), "bar";
    assert_eq req.query.get("baz"), "1";
    assert_eq req.body!.(string), "Hello World!";
}

test "send" {
    let server = test_harness.start_http_server();

    let req = Request.new(method: "GET", url: server.url("/get"));
    let res = try! req.send();
    assert_eq res.status(), 200;

    let headers = Headers.new();
    headers.set("Content-Type", "application/json");

    let req = Request.new(
        method: "POST",
        url: server.url("/post"),
        query: {"foo": "1", "bar": "Foo Bar", "foo": "a"},
        headers:,
        body: "Hello World!"
    );
    let res = try! req.send();
    assert_eq res.status(), 200;
    assert_eq res.headers().get("Content-Type"), "application/json; charset=utf-8";
    let data = try! res.json::<ResponseInfo>();
    assert_eq data.args["bar"], "Foo Bar";
    assert_eq data.url, server.url("/post?bar=Foo+Bar&foo=a");
    assert_eq data.headers["content-type"], "application/json";
    assert_eq data.headers["content-length"], "12";
}

test "body" {
    let server = test_harness.start_http_server();
    let req = Request.new(method: "POST", url: server.url("/post"));

    // Test with chunked
    req.body = Cursor.new("hello");
    let res = try! req.send();
    assert_eq res.status(), 200;
    let data = try! res.json::<ResponseInfo>();
    assert_eq data.headers.get("transfer-encoding"), "chunked";
    assert_eq data.headers.get("content-length"), nil;
    assert_eq data.data, "hello";

    // Test with not chunked
    let req = Request.new(method: "POST", url: server.url("/post"));
    req.body = "Hello";
    assert_eq req.body!.(string), "Hello";
    let res = try! req.send();
    assert_eq res.status(), 200;
    let data = try! res.json::<ResponseInfo>();
    assert_eq data.data, "Hello";
    assert_eq data.headers.get("transfer-encoding"), nil;
    assert_eq data.headers.get("content-length"), "5";

    let req = Request.new(method: "POST", url: server.url("/post"));
    req.body = "Hello".bytes();
    assert_eq req.body!.(Bytes), "Hello".bytes();

    let res = try! req.send();
    assert_eq res.status(), 200;
    let data = try! res.json::<ResponseInfo>();
    assert_eq data.data, "Hello";
    assert_eq data.headers.get("transfer-encoding"), nil;
    assert_eq data.headers.get("content-length"), "5";
}

test "method" {
    let req = Request.new();
    assert_eq req.method, "GET";

    req.method = "POST";
    assert_eq req.method, "POST";
}

test "url" {
    let req = Request.new();
    assert_eq req.url, "";

    req.url = "http://example.com";
    assert_eq req.url, "http://example.com";
}

test "headers" {
    let req = Request.new();
    assert_eq req.headers.len(), 0;

    let headers = Headers.new();
    headers.set("Content-Type", "application/json");
    headers.set("Accept-Encoding", "gzip, deflate");

    req.headers = headers;
    assert_eq req.headers.len(), 2;
    assert_eq req.headers.get("Content-Type"), "application/json";
    assert_eq req.headers.get("Accept-Encoding"), "gzip, deflate";
}

test "query" {
    let req = Request.new();
    assert_eq req.query.len(), 0;

    let query = {"foo": "bar", "baz": "1"};

    req.query = query;
    assert_eq req.query.len(), 2;
    assert_eq req.query.get("foo"), "bar";
    assert_eq req.query.get("baz"), "1";
}

test "basic_auth" {
    let server = test_harness.start_http_server();
    let req = Request.new(method: "GET", url: server.url("/basic-auth/test-user/test-passwd")).set_basic_auth(
        "test-user",
        "test-passwd"
    );
    let res = try! req.send();
    assert_eq res.status(), 200;

    let data = try! res.json::<ResponseAuth>();
    assert_eq data.authenticated, true;
}

test "timeout" {
    let server = test_harness.start_http_server();

    let req = Request.new(method: "GET", url: server.url("/get"), timeout: 5.2.seconds());
    assert_eq req.timeout, 5.2.seconds();
    req.timeout = 3.2.seconds();
    assert_eq req.timeout, 3.2.seconds();

    let res = try! req.send();
    assert_eq res.status(), 200, try! res.text();
}

struct MyRequest {
    req: http.Request
}

test "http.Request" {
    let req: http.Request = Request.new();
    assert_eq req.method, "GET";

    let my_req = MyRequest { req: req };
    assert_eq my_req.req.method, "GET";
}
